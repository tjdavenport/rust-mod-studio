[{"category":"Server","label":"Init","insertText":"void Init()\n{\n    Puts(\"Init works!\");\n}\n","documentation":"Called when a plugin is being initialized\nOther plugins may or may not be present, dependant on load order\nNo return behavior"},{"category":"Server","label":"OnServerRestartInterrupt","insertText":"object OnServerRestartInterrupt()\n{\n    Puts(\"OnServerRestartInterrupt works!\");\n    return null;\n}\n","documentation":"Called when a server restart is being cancelled\nReturning a non-null value overrides default behavior"},{"category":"Server","label":"OnServerShutdown","insertText":"void OnServerShutdown()\n{\n    Puts(\"OnServerShutdown works!\");\n}\n","documentation":"Useful for saving something / etc on server shutdown\nNo return behavior"},{"category":"Server","label":"OnServerCommand","insertText":"object OnServerCommand(ConsoleSystem.Arg arg)\n{\n    Puts(\"OnServerCommand works!\");\n    return null;\n}\n","documentation":"Useful for intercepting commands before they get to their intended target\nReturning a non-null value overrides default behavior"},{"category":"Server","label":"OnMessagePlayer","insertText":"object OnMessagePlayer(string message, BasePlayer player)\n{\n    Puts(\"OnMessagePlayer works!\");\n    return null;\n}\n","documentation":"Useful for intercepting server messages before they get to their intended target\nReturning a non-null value overrides default behavior"},{"category":"Server","label":"OnFrame","insertText":"void OnFrame()\n{\n    Puts(\"OnFrame works!\");\n}\n","documentation":"Called each frame\nNo return behavior"},{"category":"Server","label":"OnServerInformationUpdated","insertText":"void OnServerInformationUpdated()\n{\n    Puts(\"OnServerInformationUpdated works!\");\n}\n","documentation":"Called after all steam information for the server has has been updated\nNo return behavior"},{"category":"Server","label":"OnRconCommand","insertText":"void OnRconCommand(IPAddress ip, string command, string[] args)\n{\n    Puts(\"OnRconCommand works!\");\n}\n","documentation":"Called when an RCON command is run\nNo return behavior"},{"category":"Server","label":"OnRconConnection","insertText":"object OnRconConnection(IPAddress ip)\n{\n    Puts(\"OnRconConnection works!\");\n    return null;\n}\n","documentation":"Called when a new RCON connection is opened\nReturning a non-null value overrides default behavior"},{"category":"Server","label":"OnPluginLoaded","insertText":"void OnPluginLoaded(Plugin plugin)\n{\n    Puts($\"Plugin '{plugin.Name}' has been loaded\");\n}\n","documentation":"Called when any plugin has been loaded\nNo return behavior\nNot to be confused with Loaded"},{"category":"Server","label":"OnNewSave","insertText":"void OnNewSave(string filename)\n{ \n  Puts(\"OnNewSave works!\");\n}\n","documentation":"Called when a new savefile is created (usually when map has wiped)\nNo return behavior"},{"category":"Server","label":"OnSaveLoad","insertText":"object OnSaveLoad(Dictionary<BaseEntity, ProtoBuf.Entity> entities)\n{\n    Puts(\"OnSaveLoad works!\");\n    return null;\n}\n","documentation":"Called when a save file is loaded\nReturning a non-null value overrides default behavior"},{"category":"Server","label":"OnPluginUnloaded","insertText":"void OnPluginUnloaded(Plugin plugin)\n{\n    Puts($\"Plugin '{plugin.Name}' has been unloaded\");\n}\n","documentation":"Called when any plugin has been unloaded\nNo return behavior\nNot to be confused with Unload"},{"category":"Server","label":"OnServerMessage","insertText":"//  Example that stops message from being sent\n\nobject OnServerMessage(string message, string playerName, string color, ulong playerId)\n{\n    if (message.Contains(\"gave\"))\n    {\n        Puts($\"Message to {playerName} ({playerId}) cancelled\");\n        return false;\n    }\n\n    return null;\n}\n","documentation":"Called before a SERVER message is sent to a player\nReturn a non-null value to stop message from being sent"},{"category":"Server","label":"OnServerInitialized","insertText":"void OnServerInitialized(bool initial)\n{\n    Puts(\"OnServerInitialized works!\");\n}\n","documentation":"Called after the server startup has been completed and is awaiting connections\nAlso called for plugins that are hotloaded while the server is already started running\nBoolean parameter, false if called on plugin hotload and true if called on server initialization\nNo return behavior"},{"category":"Server","label":"OnTick","insertText":"void OnTick()\n{\n    Puts(\"OnTick works!\");\n}\n","documentation":"Called every tick (defined by the tick rate of the server)\nFor better performance, avoid using heavy calculations in this hook.\nNo return behavior"},{"category":"Server","label":"OnServerSave","insertText":"void OnServerSave()\n{\n    Puts(\"OnServerSave works!\");\n}\n","documentation":"Called before the server saves\nNo return behavior"},{"category":"Player","label":"CanAffordUpgrade","insertText":"bool CanAffordUpgrade(BasePlayer player, BuildingBlock block, BuildingGrade.Enum grade)\n{\n    Puts(\"CanAffordUpgrade works!\");\n    return true;\n}\n","documentation":"Called when the resources for an upgrade are checked\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanAssignBed","insertText":"object CanAssignBed(BasePlayer player, SleepingBag bag, ulong targetPlayerId)\n{\n    Puts(\"CanAssignBed works!\");\n    return null;\n}\n","documentation":"Called when a player attempts to assign a bed or sleeping bag to another player\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanUpdateSign","insertText":"bool CanUpdateSign(BasePlayer player, Signage sign)\n{\n    Puts(\"CanUpdateSign works!\");\n    return true;\n}\n","documentation":"Called when the player attempts to change the text on a sign or lock it, or update a photo frame\nReturning true or false overrides default behavior"},{"category":"Player","label":"OnUserChat","insertText":"object OnUserChat(IPlayer player, string message)\n{\n    Puts($\"{player.Name} said: {message}\");\n    return null;\n}\n","documentation":"Called when a player sends a chat message to the server\nReturning true overrides default behavior of chat, not commands"},{"category":"Player","label":"OnPlayerCommand","insertText":"object OnPlayerCommand(BasePlayer player, string command, string[] args)\n{\n    Puts(\"OnPlayerCommand works!\");\n    return null;\n}\n","documentation":"Useful for intercepting players' commands before their handling\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnUserCommand","insertText":"object OnUserCommand(IPlayer player, string command, string[] args)\n{\n    Puts(\"OnUserCommand works!\");\n    return null;\n}\n","documentation":"Useful for intercepting players' commands before their handling\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerRevive","insertText":"object OnPlayerRevive(BasePlayer reviver, BasePlayer player)\n{\n    Puts($\"{reviver.displayName} revived {player.displayName}\");\n    return null;\n}\n","documentation":"Called before the recover after reviving with a medical tool\nUseful for canceling the reviving\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"CanLock","insertText":"object CanLock(BasePlayer player, BaseLock baseLock)\n{\n    Puts(\"CanLock works!\");\n    return null;\n}\n","documentation":"Useful for canceling the lock action\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnMeleeAttack","insertText":"object OnMeleeAttack(BasePlayer player, HitInfo info)\n{\n    Puts(\"OnMeleeAttack works!\");\n    return null;\n}\n","documentation":"Useful for canceling melee attacks\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnPlayerRecovered","insertText":"void OnPlayerRecovered(BasePlayer player)\n{\n    Puts(\"OnPlayerRecovered works!\");\n}\n","documentation":"Called when the player was recovered\nNo return behavior"},{"category":"Player","label":"CanPushBoat","insertText":"object CanPushBoat(BasePlayer player, MotorRowboat boat)\n{\n    Puts(\"CanPushBoat works!\");\n    return null;\n}\n","documentation":"Useful for canceling boat push\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"CanDeployItem","insertText":"object CanDeployItem(BasePlayer player, Deployer deployer, NetworkableId entityId)\n{\n    Puts(\"CanDeployItem works!\");\n    return null;\n}\n","documentation":"Useful for denying items' deployment\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnPlayerAssist","insertText":"object OnPlayerAssist(BasePlayer target, BasePlayer player)\n{\n    Puts(\"OnPlayerAssist works!\");\n    return null;\n}\n","documentation":"Called when a player tries to assist target player (when target is wounded)\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnPlayerSetInfo","insertText":"void OnPlayerSetInfo(Connection connection, string key, string value)\n{\n    Puts($\"{connection.userid}: {key} was set to {value}\");\n}\n","documentation":"Called when setting player's information (aka console variables)\nNo return behavior"},{"category":"Player","label":"CanSpectateTarget","insertText":"object CanSpectateTarget(BasePlayer player, string filter)\n{\n    Puts($\"{player.displayName} tries to spectate with a filter: {filter}\");\n    return null;\n}\n","documentation":"Called when spectate target is attempting to update\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnActiveItemChange","insertText":"object OnActiveItemChange(BasePlayer player, Item oldItem, ItemId newItemId)\n{\n    Puts(\"OnActiveItemChange works!\");\n    return null;\n}\n","documentation":"Called when active item is attempting to update\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnActiveItemChanged","insertText":"void OnActiveItemChanged(BasePlayer player, Item oldItem, Item newItem)\n{\n    Puts(\"OnActiveItemChanged works!\");\n}\n","documentation":"Called when active item was changed\nNo return behavior"},{"category":"Player","label":"OnPayForUpgrade","insertText":"object OnPayForUpgrade(BasePlayer player, BuildingBlock block, ConstructionGrade gradeTarget)\n{\n    Puts(\"OnPayForUpgrade works!\");\n    return null;\n}\n","documentation":"Called when player is paying for an upgrade. Useful for preventing paying for block upgrade\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnMapMarkerRemove","insertText":"object OnMapMarkerRemove(BasePlayer player, MapNote note)\n{\n    Puts(\"OnMapMarkerRemove works!\");\n    return null;\n}\n","documentation":"Called when trying to remove a marker\nReturning a non-null value cancels default behaviour"},{"category":"Player","label":"OnMapMarkerAdd","insertText":"object OnMapMarkerAdd(BasePlayer player, MapNote note)\n{\n    Puts(\"OnMapMarkerAdd works!\");\n    return null;\n}\n","documentation":"Called when trying to add a marker\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnMapMarkerAdded","insertText":"void OnMapMarkerAdded(BasePlayer player, MapNote note)\n{\n    Puts(\"OnMapMarkerAdded works!\");\n}\n","documentation":"Called after a marker was added\nNo return behavior"},{"category":"Player","label":"OnMapMarkersClear","insertText":"object OnMapMarkersClear(BasePlayer player, List<MapNote> notes)\n{\n    Puts(\"OnMapMarkersClear works!\");\n    return null;\n}\n","documentation":"Called when trying to clear map markers\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnMapMarkersCleared","insertText":"void OnMapMarkersCleared(BasePlayer player, List<MapNote> notes)\n{\n    Puts(\"OnMapMarkersCleared works!\");\n}\n","documentation":"Called after markers were cleared\nNo return behavior"},{"category":"Player","label":"OnPayForPlacement","insertText":"object OnPayForPlacement(BasePlayer player, Planner planner, Construction construction)\n{\n    Puts(\"OnPayForPlacement works!\");\n    return null;\n}\n","documentation":"Called when a player is paying for placement. Useful for preventing paying for placing deployables, building blocks and etc\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"CanAffordToPlace","insertText":"bool CanAffordToPlace(BasePlayer player, Planner planner, Construction construction)\n{\n    Puts(\"CanAffordToPlace works!\");\n    return false;\n}\n","documentation":"Useful for ignoring resource requirements for placement\nReturning true or false overrides default behavior\n "},{"category":"Player","label":"OnPlayerKeepAlive","insertText":"object OnPlayerKeepAlive(BasePlayer player, BasePlayer target)\n{\n    Puts(\"OnPlayerKeepAlive works!\");\n    return null;\n}\n","documentation":"Called before a player is kept alive (Example: You started \"helping\" player, it keeps him alive for at least 10 seconds more to be sure he won't die until you finish picking him up)\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnSendCommand","insertText":"object OnSendCommand(List<Connection> connections, string command, object[] args)\n{\n    Puts(\"OnSendCommand works!\");\n    return null;\n}\n\nobject OnSendCommand(Connection connection, string command, object[] args)\n{\n    Puts(\"OnSendCommand works!\");\n    return null;\n}\n","documentation":"Called before a command is sent from the server to a player (or a group of players)\nUsually commands aren't sent to a group of players, so in most cases it's safe to use only OnSendCommand with a single Connection.\nReturning a non-null value overwrites command arguments"},{"category":"Player","label":"OnBroadcastCommand","insertText":"object OnBroadcastCommand(string command, object[] args)\n{\n    Puts(\"OnBroadcastCommand works!\");\n    return null;\n}\n","documentation":"Called before a command is broadcasted to all connected clients\nReturning a non-null value overwrites command arguments"},{"category":"Player","label":"OnUserRespawn","insertText":"void OnUserRespawn(IPlayer player)\n{\n    Puts(\"OnUserRespawn works!\");\n}\n","documentation":"Called when a player is respawning\nNo return behavior"},{"category":"Player","label":"OnUserRespawned","insertText":"void OnUserRespawned(IPlayer player)\n{\n    Puts(\"OnUserRespawned works!\");\n}\n","documentation":"Called after a player has respawned\nNo return behavior"},{"category":"Player","label":"OnPlayerReported","insertText":"void OnPlayerReported(BasePlayer reporter, string targetName, string targetId, string subject, string message, string type)\n{\n    Puts($\"{reporter.displayName} reported {targetName} for {subject}.\");\n}\n","documentation":"Called when a player has reported someone via F7\nNo return behavior"},{"category":"Player","label":"OnPlayerCorpse","insertText":"void OnPlayerCorpse(BasePlayer player, BaseCorpse corpse)\n{\n    Puts($\"A corpse for {player.displayName} has just been spawned!\");\n}\n","documentation":"Called when a non-null corpse has just been spawned\nNo return behavior"},{"category":"Player","label":"CanUseWires","insertText":"object CanUseWires(BasePlayer player)\n{\n    Puts($\"{player.displayName} has just tried to use wires\");\n    return null;\n}\n","documentation":"Useful for allowing or preventing a player from using wires\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerCorpseSpawn","insertText":"object OnPlayerCorpseSpawn(BasePlayer player)\n{\n    Puts(\"OnPlayerCorpseSpawn works!\");\n    return null;\n}\n","documentation":"Called when a non-null corpse is about to spawn\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerCorpseSpawned","insertText":"void OnPlayerCorpseSpawned(BasePlayer player, PlayerCorpse corpse)\n{\n    Puts(\"OnPlayerCorpseSpawned works!\");\n}\n","documentation":"Called when a non-null corpse has just been spawned\nNo return behavior"},{"category":"Player","label":"OnUserConnected","insertText":"void OnUserConnected(IPlayer player)\n{\n    Puts($\"{player.Name} ({player.Id}) connected from {player.Address}\");\n\n    if (player.IsAdmin)\n    {\n        Puts($\"{player.Name} ({player.Id}) is admin\");\n    }\n\n    Puts($\"{player.Name} is {(player.IsBanned ? \"banned\" : \"not banned\")}\");\n\n    server.Broadcast($\"Welcome {player.Name} to {server.Name}!\");\n}\n","documentation":"Called after a player has been approved and has connected to the server\nNo return behavior"},{"category":"Player","label":"OnUserDisconnected","insertText":"void OnUserDisconnected(IPlayer player)\n{\n    Puts($\"{player.Name} ({player.Id}) disconnected\");\n}\n","documentation":"Called after a player has disconnected from the server\nNo return behavior"},{"category":"Player","label":"CanBeTargeted","insertText":"bool CanBeTargeted(BaseCombatEntity player, MonoBehaviour behaviour)\n{\n    Puts(\"CanBeTargeted works!\");\n    return true;\n}\n","documentation":"Called when an autoturret, flame turret, shotgun trap, or helicopter turret is attempting to target the player\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanBeWounded","insertText":"bool CanBeWounded(BasePlayer player, HitInfo info)\n{\n    Puts(\"CanBeWounded works!\");\n    return true;\n}\n","documentation":"Called when any damage is attempted on player\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanBuild","insertText":"object CanBuild(Planner planner, Construction prefab, Construction.Target target)\n{\n    Puts(\"CanBuild works!\");\n    return null;\n}\n","documentation":"Called when the player tries to build something\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanBypassQueue","insertText":"bool CanBypassQueue(Network.Connection connection)\n{\n    Puts(\"CanBypassQueue works!\");\n    return true;\n}\n","documentation":"Called before the player is added to the connection queue\nReturning true will bypass the queue, returning nothing will by default queue the player"},{"category":"Player","label":"CanChangeCode","insertText":"object CanChangeCode(BasePlayer player, CodeLock codeLock, string newCode, bool isGuestCode)\n{\n    Puts(\"CanChangeCode works!\");\n    return null;\n}\n","documentation":"Called when a player tries to change the code on a codelock\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanChangeGrade","insertText":"bool CanChangeGrade(BasePlayer player, BuildingBlock block, BuildingGrade.Enum grade)\n{\n    Puts(\"CanChangeGrade works!\");\n    return true;\n}\n","documentation":"Called when a player tries to change a building grade\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanCraft","insertText":"bool CanCraft(ItemCrafter itemCrafter, ItemBlueprint bp, int amount)\n{\n    Puts(\"CanCraft works!\");\n    return true;\n}\n","documentation":"Called when the player attempts to craft an item\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanClientLogin","insertText":"object CanClientLogin(Network.Connection connection)\n{\n    Puts(\"CanClientLogin works!\");\n    return true;\n}\n","documentation":"Called when the player is attempting to login\nReturning a string will use the string as the error message\nReturning true allows the connection, returning nothing will by default allow the connection, returning anything else will reject it with an error message"},{"category":"Player","label":"CanUserLogin","insertText":"object CanUserLogin(string name, string id, string ipAddress)\n{\n    if (name.ToLower().Contains(\"admin\"))\n    {\n        Puts($\"{name} ({id}) at {ipAddress} tried to connect with 'admin' in name\");\n        return \"Sorry, your name cannot have 'admin' in it\";\n    }\n    \n    return true;\n}\n","documentation":"Called when a player is attempting to connect to the server\nReturning a string will kick the user with this reason. Returning a non-null value overrides default behavior\n"},{"category":"Player","label":"OnUserApproved","insertText":"void OnUserApproved(string name, string id, string ipAddress)\n{\n    Puts($\"{name} ({id}) at {ipAddress} has been approved to connect\");\n}\n","documentation":"Called after a player is approved to connect to the server\nNo return behavior"},{"category":"Player","label":"CanDemolish","insertText":"bool CanDemolish(BasePlayer player, BuildingBlock block, BuildingGrade.Enum grade)\n{\n    Puts(\"CanDemolish works!\");\n    return true;\n}\n","documentation":"Called when a player tries to demolish a building block\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanHackCrate","insertText":"object CanHackCrate(BasePlayer player, HackableLockedCrate crate)\n{\n    Puts(\"CanHackCrate works!\");\n    return null;\n}\n","documentation":"Called when a player starts hacking a locked crate\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnUserNameUpdated","insertText":"void OnUserNameUpdated(string id, string oldName, string newName)\n{\n    Puts($\"Player name changed from {oldName} to {newName} for ID {id}\");\n}\n","documentation":"Called when a player's stored nickname has been changed\nNo return behavior"},{"category":"Player","label":"CanDismountEntity","insertText":"object CanDismountEntity(BasePlayer player, BaseMountable entity)\n{\n    Puts(\"CanDismountEntity works!\");\n    return null;\n}\n","documentation":"Called when the player attempts to dismount an entity\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnUserGroupAdded","insertText":"void OnUserGroupAdded(string id, string groupName)\n{\n    Puts($\"Player '{id}' added to group: {groupName}\");\n}\n","documentation":"Called when a player has been added to a group\nNo return behavior"},{"category":"Player","label":"OnUserGroupRemoved","insertText":"void OnUserGroupRemoved(string id, string groupName)\n{\n    Puts($\"Player '{id}' removed from group: {groupName}\");\n}\n","documentation":"Called when a player has been removed from a group\nNo return behavior"},{"category":"Player","label":"CanEquipItem","insertText":"bool CanEquipItem(PlayerInventory inventory, Item item, int targetPos)\n{\n    Puts(\"CanEquipItem works!\");\n    return true;\n}\n","documentation":"Called when the player attempts to equip an item\nReturning true or false overrides default behavior"},{"category":"Player","label":"OnExperimentStart","insertText":"object OnExperimentStart(Workbench workbench, BasePlayer player)\n{\n    Puts(\"OnExperimentStart works!\");\n    return null;\n}\n","documentation":"Called when the player attempts to experiment with at a workbench\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnUserPermissionGranted","insertText":"void OnUserPermissionGranted(string id, string permName)\n{\n    Puts($\"Player '{id}' granted permission: {permName}\");\n}\n","documentation":"Called when a permission has been granted to a player\nNo return behavior"},{"category":"Player","label":"OnUserPermissionRevoked","insertText":"void OnUserPermissionRevoked(string id, string permName)\n{\n    Puts($\"Player '{id}' revoked permission: {permName}\");\n}\n","documentation":"Called when a permission has been revoked from a player\nNo return behavior"},{"category":"Player","label":"OnExperimentStarted","insertText":"void OnExperimentStarted(Workbench workbench, BasePlayer player)\n{\n    Puts(\"OnExperimentStarted works!\");\n}\n","documentation":"Called after the experimentation has started\nNo return behaviour"},{"category":"Player","label":"OnUserKicked","insertText":"void OnUserKicked(IPlayer player, string reason)\n{\n    Puts($\"Player {player.Name} ({player.Id}) was kicked\");\n}\n","documentation":"Called when a player has been kicked from the server\nNo return behavior"},{"category":"Player","label":"OnExperimentEnd","insertText":"object OnExperimentEnd(Workbench workbench)\n{\n    Puts(\"OnExperimentEnd works!\");\n    return null;\n}\n","documentation":"Called when an experiment is about to end\nReturning a non-null value overrides defualt behaviour."},{"category":"Player","label":"OnExperimentEnded","insertText":"void OnExperimentEnded(Workbench workbench)\n{\n    Puts(\"OnExperimentEnded works!\");\n}\n","documentation":"Called after the experiment has finished\nNo return behaviour"},{"category":"Player","label":"OnUserBanned","insertText":"void OnUserBanned(string name, string id, string ipAddress, string reason)\n{\n    Puts($\"Player {name} ({id}) at {ipAddress} was banned: {reason}\");\n}\n","documentation":"Called when a player has been banned from the server\nWill have reason available if provided\nNo return behavior"},{"category":"Player","label":"CanHideStash","insertText":"object CanHideStash(BasePlayer player, StashContainer stash)\n{\n    Puts(\"CanHideStash works!\");\n    return null;\n}\n","documentation":"Called when a player tries to hide a stash\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnUserUnbanned","insertText":"void OnUserUnbanned(string name, string id, string ipAddress)\n{\n    Puts($\"Player {name} ({id}) at {ipAddress} was unbanned\");\n}\n","documentation":"Called when a player has been unbanned from the server\nNo return behavior"},{"category":"Player","label":"CanLootPlayer","insertText":"bool CanLootPlayer(BasePlayer target, BasePlayer looter)\n{\n    Puts(\"CanLootPlayer works!\");\n    return true;\n}\n","documentation":"Called when the player attempts to loot another player\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanLootEntity","insertText":"object CanLootEntity(BasePlayer player, DroppedItemContainer container)\n{\n    Puts(\"CanLootEntity works!\");\n    return null;\n}\n","documentation":"Called when the player starts looting a DroppedItemContainer, LootableCorpse, ResourceContainer, BaseRidableAnimal, or StorageContainer entity\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanMountEntity","insertText":"object CanMountEntity(BasePlayer player, BaseMountable entity)\n{\n    Puts(\"CanMountEntity works!\");\n    return null;\n}\n","documentation":"Called when the player attempts to mount an entity\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanPickupEntity","insertText":"bool CanPickupEntity(BasePlayer player, BaseEntity entity)\n{\n    Puts(\"CanPickupEntity works!\");\n    return true;\n}\n","documentation":"Called when a player attempts to pickup a deployed entity (AutoTurret, BaseMountable, BearTrap, DecorDeployable, Door, DoorCloser, ReactiveTarget, SamSite, SleepingBag, SpinnerWheel, StorageContainer, etc.)\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanPickupLock","insertText":"bool CanPickupLock(BasePlayer player, BaseLock baseLock)\n{\n    Puts(\"CanPickupLock works!\");\n    return true;\n}\n","documentation":"Called when a player attempts to pickup a lock\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanRenameBed","insertText":"object CanRenameBed(BasePlayer player, SleepingBag bed, string bedName)\n{\n    Puts(\"CanRenameBed works!\");\n    return null;\n}\n","documentation":"Called when the player attempts to rename a bed or sleeping bag\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanResearchItem","insertText":"object CanResearchItem(BasePlayer player, Item targetItem)\n{\n    Puts(\"CanResearchItem works!\");\n    return null;\n}\n","documentation":"Called when the player attempts to research an item\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanUseLockedEntity","insertText":"bool CanUseLockedEntity(BasePlayer player, BaseLock baseLock)\n{\n    Puts(\"CanUseLockedEntity works!\");\n    return true;\n}\n","documentation":"Called when the player tries to use an entity that is locked\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanSeeStash","insertText":"object CanSeeStash(BasePlayer player, StashContainer stash)\n{\n    Puts(\"CanSeeStash works!\");\n    return null;\n}\n","documentation":"Called when a player is looking at a hidden stash\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnStashExposed","insertText":"void OnStashExposed(StashContainer stash, BasePlayer player)\n{\n    Puts(\"OnStashExposed works\");\n}\n","documentation":"Called when a player reveals a hidden stash\nNo return behavior"},{"category":"Player","label":"OnStashHidden","insertText":"void OnStashHidden(StashContainer stash, BasePlayer player)\n{\n    Puts(\"OnStashHidden works!\");\n}\n","documentation":"Called when a player hides a stash\nNo return behavior"},{"category":"Player","label":"CanSetBedPublic","insertText":"object CanSetBedPublic(BasePlayer player, SleepingBag bed)\n{\n    Puts(\"CanSetBedPublic works!\");\n    return null;\n}\n","documentation":"Called when a player tries to set a bed public\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanUnlock","insertText":"object CanUnlock(BasePlayer player, BaseLock baseLock)\n{\n    Puts(\"CanUnlock works!\");\n    return null;\n}\n","documentation":"Called when the player tries to unlock a keylock or codelock\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanUseMailbox","insertText":"bool CanUseMailbox(BasePlayer player, Mailbox mailbox)\n{\n    Puts(\"CanUseMailbox works!\");\n    return true;\n}\n","documentation":"Called when the player tries to use a mailbox\nReturning true or false overrides default behavior"},{"category":"Player","label":"CanUseUI","insertText":"object CanUseUI(BasePlayer player, string json)\n{\n    Puts(\"CanUseUI works!\");\n    return null;\n}\n","documentation":"Called when the player attempts to use a custom UI\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"CanWearItem","insertText":"object CanWearItem(PlayerInventory inventory, Item item, int targetSlot)\n{\n    Puts(\"CanWearItem works!\");\n    return null;\n}\n","documentation":"Called when the player attempts to equip an item\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnClientAuth","insertText":"void OnClientAuth(Connection connection)\n{\n    Puts(\"OnClientAuth works!\");\n}\n","documentation":"Called when the player is giving server connection authorization information\nNo return behavior"},{"category":"Player","label":"OnDestroyUI","insertText":"void OnDestroyUI(BasePlayer player, string json)\n{\n    Puts(\"OnDestroyUI works!\");\n}\n","documentation":"Called when a custom UI is destroyed for the player\nNo return behavior"},{"category":"Player","label":"OnFindSpawnPoint","insertText":"void OnFindSpawnPoint(BasePlayer player)\n{\n    Puts(\"OnFindSpawnPoint works!\");\n}\n","documentation":"Useful for controlling player spawnpoints (like making all spawns occur in a set area)\nReturn a BasePlayer.SpawnPoint object to use that spawnpoint"},{"category":"Player","label":"OnLootEntity","insertText":"void OnLootEntity(BasePlayer player, BaseEntity entity)\n{\n    Puts(\"OnLootEntity works!\");\n}\n","documentation":"Called when the player starts looting an entity\nNo return behavior"},{"category":"Player","label":"OnLootEntityEnd","insertText":"void OnLootEntityEnd(BasePlayer player, BaseCombatEntity entity)\n{\n    Puts(\"OnLootEntityEnd works!\");\n}\n","documentation":"Called when the player stops looting an entity\nNo return behavior"},{"category":"Player","label":"OnLootItem","insertText":"void OnLootItem(PlayerLoot playerLoot, Item item)\n{\n    Puts(\"OnLootItem works!\");\n}\n","documentation":"Called when the player starts looting an item\nNo return behavior"},{"category":"Player","label":"OnLootPlayer","insertText":"void OnLootPlayer(BasePlayer player, BasePlayer target)\n{\n    Puts(\"OnLootPlayer works!\");\n}\n","documentation":"Called when the player starts looting another player\nNo return behavior"},{"category":"Player","label":"OnPlayerAttack","insertText":"object OnPlayerAttack(BasePlayer attacker, HitInfo info)\n{\n    Puts(\"OnPlayerAttack works!\");\n    return null;\n}\n","documentation":"Useful for modifying an attack before it goes out\nhitInfo.HitEntity should be the entity that this attack would hit\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerBanned","insertText":"void OnPlayerBanned(string name, ulong id, string address, string reason)\n{\n    Puts(\"OnPlayerBanned works!\");\n}\n","documentation":"Called when the player is banned (Facepunch, EAC, server ban, etc.)\nNo return behavior"},{"category":"Player","label":"OnPlayerChat","insertText":"object OnPlayerChat(BasePlayer player, string message, Chat.ChatChannel channel)\n{\n    Puts(\"OnPlayerChat works!\");\n    return null;\n}\n","documentation":"Called when the player sends chat to the server\nReturning a non-null value overrides default behavior of chat, not commands"},{"category":"Player","label":"OnPlayerConnected","insertText":"void OnPlayerConnected(BasePlayer player)\n{\n    Puts(\"OnPlayerConnected works!\");\n}\n","documentation":"Called after the player object is created, but before the player has spawned\nNo return behavior"},{"category":"Player","label":"OnPlayerDeath","insertText":"object OnPlayerDeath(BasePlayer player, HitInfo info)\n{\n    Puts(\"OnPlayerDeath works!\");\n    return null;\n}\n","documentation":"Called when the player is about to die\nHitInfo may be null sometimes\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerDisconnected","insertText":"void OnPlayerDisconnected(BasePlayer player, string reason)\n{\n    Puts(\"OnPlayerDisconnected works!\");\n}\n","documentation":"Called after the player has disconnected from the server\nNo return behavior"},{"category":"Player","label":"OnPlayerDropActiveItem","insertText":"void OnPlayerDropActiveItem(BasePlayer player, Item item)\n{\n    Puts(\"OnPlayerDropActiveItem works!\");\n}\n","documentation":"Called when the player drops their active held item\nNo return behavior"},{"category":"Player","label":"OnPlayerHealthChange","insertText":"object OnPlayerHealthChange(BasePlayer player, float oldValue, float newValue)\n{\n    Puts(\"OnPlayerHealthChange works!\");\n    return null;\n}\n","documentation":"Called just before the player's health changes\nReturning a non-null value cancels the health change"},{"category":"Player","label":"OnPlayerInput","insertText":"void OnPlayerInput(BasePlayer player, InputState input)\n{\n    Puts(\"OnPlayerInput works!\");\n}\n","documentation":"Called when input is received from a connected client\nNo return behavior"},{"category":"Player","label":"OnPlayerKicked","insertText":"void OnPlayerKicked(BasePlayer player, string reason)\n{\n    Puts(\"OnPlayerKicked works!\");\n}\n","documentation":"Called after the player is kicked from the server\nNo return behavior"},{"category":"Player","label":"OnPlayerLand","insertText":"object OnPlayerLand(BasePlayer player, float num)\n{\n    Puts(\"OnPlayerLand works!\");\n    return null;\n}\n","documentation":"Called just before the player lands on the ground\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerLanded","insertText":"void OnPlayerLanded(BasePlayer player, float num)\n{\n    Puts(\"OnPlayerLanded works!\");\n}\n","documentation":"Called when the player landed on the ground\nNo return behavior"},{"category":"Player","label":"OnPlayerLootEnd","insertText":"void OnPlayerLootEnd(PlayerLoot inventory)\n{\n    Puts(\"OnPlayerLootEnd works!\");\n}\n","documentation":"Called when the player stops looting\nNo return behavior"},{"category":"Player","label":"OnPlayerMetabolize","insertText":"void OnPlayerMetabolize(PlayerMetabolism metabolism, BaseCombatEntity entity, float delta)\n{\n    Puts(\"OnPlayerMetabolize works!\");\n}\n","documentation":"Called after the player's metabolism has been changed\nNo return behavior"},{"category":"Player","label":"OnPlayerRecover","insertText":"object OnPlayerRecover(BasePlayer player)\n{\n    Puts(\"OnPlayerRecover works!\");\n    return null;\n}\n","documentation":"Called when the player is about to recover from the 'wounded' state\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerRespawn","insertText":"object OnPlayerRespawn(BasePlayer player, BasePlayer.SpawnPoint spawnPoint)\n{\n    Puts(\"OnPlayerRespawn works!\");\n    return null;\n}\n","documentation":"Called when a player is attempting to respawn\nReturning a BasePlayer.SpawnPoint (takes a position and rotation), overrides the respawn location, for the variant that receives a BasePlayer.SpawnPoint argument\nReturning a SleepingBag overrides the respawn location, for the variant that receives a SleepingBag argument"},{"category":"Player","label":"OnPlayerRespawned","insertText":"void OnPlayerRespawned(BasePlayer player)\n{\n    Puts(\"OnPlayerRespawned works!\");\n}\n","documentation":"Called when the player has respawned (specifically when they click the \"Respawn\" button)\nONLY called after the player has transitioned from dead to not-dead, so not when they're waking up\nThis means it's possible for the player to connect and disconnect from a server without OnPlayerRespawned ever triggering for them\nNo return behavior"},{"category":"Player","label":"OnRespawnInformationGiven","insertText":"void OnRespawnInformationGiven(BasePlayer player, RespawnInformation respawnInformation)\n{\n    Puts(\"OnRespawnInformationGiven works!\");\n}\n","documentation":"Called when a player is about to be sent respawn information\nNo return behavior"},{"category":"Player","label":"OnPlayerSleep","insertText":"object OnPlayerSleep(BasePlayer player)\n{\n    Puts(\"OnPlayerSleep works!\");\n    return null;\n}\n","documentation":"Called when the player is about to go to sleep\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerSleepEnded","insertText":"void OnPlayerSleepEnded(BasePlayer player)\n{\n    Puts(\"OnPlayerSleepEnded works!\");\n}\n","documentation":"Called when the player awakes\nNo return behavior"},{"category":"Player","label":"OnPlayerSpawn","insertText":"object OnPlayerSpawn(BasePlayer player)\n{\n    Puts(\"OnPlayerSpawn works!\");\n    return null;\n}\n","documentation":"Called when a player is attempting to spawn for the first time\nReturning true overrides default behavior"},{"category":"Player","label":"OnPlayerSpectate","insertText":"object OnPlayerSpectate(BasePlayer player, string spectateFilter)\n{\n    Puts(\"OnPlayerSpectate works!\");\n    return null;\n}\n","documentation":"Called when the player starts spectating\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerSpectateEnd","insertText":"object OnPlayerSpectateEnd(BasePlayer player, string spectateFilter)\n{\n    Puts(\"OnPlayerSpectateEnd works!\");\n    return null;\n}\n","documentation":"Called when the player stops spectating\nReturning a non-null value stops the spectate from ending"},{"category":"Player","label":"OnPlayerTick","insertText":"object OnPlayerTick(BasePlayer player, PlayerTick msg, bool wasPlayerStalled)\n{\n    Puts(\"OnPlayerTick works!\");\n    return null;\n}\n","documentation":"Returning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerViolation","insertText":"object OnPlayerViolation(BasePlayer player, AntiHackType type, float amount)\n{\n    Puts(\"OnPlayerViolation works!\");\n    return null;\n}\n","documentation":"Called when the player triggers an anti-hack violation\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerVoice","insertText":"object OnPlayerVoice(BasePlayer player, Byte[] data)\n{\n    Puts(\"OnPlayerVoice works!\");\n    return null;\n}\n","documentation":"Called when the player uses the in-game voice chat\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerWound","insertText":"object OnPlayerWound(BasePlayer player, HitInfo info)\n{\n    Puts(\"OnPlayerWound works!\");\n    return null;\n}\n","documentation":"Called when the player is about to go down to the 'wounded' state\nsource might be null, check it before use\nReturning a non-null value cancels the wounded state"},{"category":"Player","label":"OnRunPlayerMetabolism","insertText":"object OnRunPlayerMetabolism(PlayerMetabolism metabolism, BasePlayer player, float delta)\n{\n    Puts(\"OnRunPlayerMetabolism works!\");\n    return null;\n}\n","documentation":"Called before a metabolism update occurs for the specified player\nMetabolism update consists of managing the player's temperature, health etc.\nYou can use this to turn off or change certain aspects of the metabolism, either by editing values before returning, or taking complete control of the method\nReturning a non-null value cancels the update"},{"category":"Player","label":"OnUserApprove","insertText":"object OnUserApprove(Network.Connection connection)\n{\n    Puts(\"OnUserApprove works!\");\n    return null;\n}\n","documentation":"Used by RustCore and abstracted into CanClientLogin\nReturning a non-null value overrides default behavior, plugin should call Reject if it does this"},{"category":"Player","label":"OnDefaultItemsReceive","insertText":"object OnDefaultItemsReceive(PlayerInventory inventory)\n{\n    Puts(\"OnDefaultItemsReceive works!\");\n    return null;\n}\n","documentation":"Called when a player is about to receive default items\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnDefaultItemsReceived","insertText":"void OnDefaultItemsReceived(PlayerInventory inventory)\n{\n    Puts(\"OnDefaultItemsReceived works!\");\n}\n","documentation":"Called after a player has received default items\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnAnalysisComplete","insertText":"void OnAnalysisComplete(SurveyCrater surveyCrater, BasePlayer player)\n{\n    Puts(\"OnAnalysisComplete works!\");\n}\n","documentation":"Called right after a player completes a survey crater analysis\nNo return behavior"},{"category":"Player","label":"OnNpcConversationStart","insertText":"object OnNpcConversationStart(NPCTalking npcTalking, BasePlayer player, ConversationData conversationData)\n{\n    Puts(\"OnNpcConversationStart works!\");\n    return null;\n}\n","documentation":"Called when a player tries to start a conversation with an NPC\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnNpcConversationRespond","insertText":"object OnNpcConversationRespond(NPCTalking npcTalking, BasePlayer player, ConversationData conversationData, ConversationData.ResponseNode responseNode)\n{\n    Puts(\"OnNpcConversationRespond works!\");\n    return null;\n}\n","documentation":"Called when a player chooses an NPC conversation response\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnNpcConversationResponded","insertText":"void OnNpcConversationResponded(NPCTalking npcTalking, BasePlayer player, ConversationData conversationData, ConversationData.ResponseNode responseNode)\n{\n    Puts(\"OnNpcConversationResponded works!\");\n}\n","documentation":"Called right after a player's chosen NPC conversation response has been processed\nNo return behavior"},{"category":"Player","label":"OnNpcConversationEnded","insertText":"void OnNpcConversationEnded(NPCTalking npcTalking, BasePlayer player)\n{\n    Puts(\"OnNpcConversationEnded works!\");\n}\n","documentation":"Called right after a player has ended an NPC conversation\nNo return behavior"},{"category":"Player","label":"OnNetworkGroupEntered","insertText":"void OnNetworkGroupEntered(BasePlayer player, Network.Visibility.Group group)\n{\n    Puts(\"OnNetworkGroupEntered works!\");\n}\n","documentation":"Called after a player has entered a network group\nNo return behavior"},{"category":"Player","label":"OnNetworkGroupLeft","insertText":"void OnNetworkGroupLeft(BasePlayer player, Network.Visibility.Group group)\n{\n    Puts(\"OnNetworkGroupLeft works!\");\n}\n","documentation":"Called after a player has left a network group\nNo return behavior"},{"category":"Player","label":"OnDemoRecordingStart","insertText":"object OnDemoRecordingStart(string filename, BasePlayer player)\n{\n    Puts(\"OnDemoRecordingStart works!\");\n    return null;\n}\n","documentation":"Called right before a demo of a player starts recording\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnDemoRecordingStarted","insertText":"void OnDemoRecordingStarted(string filename, BasePlayer player)\n{\n    Puts(\"OnDemoRecordingStarted works!\");\n}\n","documentation":"Called after a demo of a player has started recording\nNo return behavior"},{"category":"Player","label":"OnDemoRecordingStop","insertText":"object OnDemoRecordingStop(string filename, BasePlayer player)\n{\n    Puts(\"OnDemoRecordingStop works!\");\n    return null;\n}\n","documentation":"Called right before a demo of a player stops recording\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnDemoRecordingStopped","insertText":"void OnDemoRecordingStopped(string filename, BasePlayer player)\n{\n    Puts(\"OnDemoRecordingStopped works!\");\n}\n","documentation":"Called after a demo of a player has stopped recording\nNo return behavior"},{"category":"Player","label":"OnLootNetworkUpdate","insertText":"object OnLootNetworkUpdate(PlayerLoot loot)\n{\n    Puts(\"OnLootNetworkUpdate works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to loot a container or a container they are looting has changed its contents\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnInventoryNetworkUpdate","insertText":"object OnInventoryNetworkUpdate(PlayerInventory inventory, ItemContainer container, ProtoBuf.UpdateItemContainer updateItemContainer, PlayerInventory.Type type, bool broadcast)\n{\n    Puts(\"OnInventoryNetworkUpdate works!\");\n    return null;\n}\n","documentation":"Called after a player's inventory contents have changed, before it is sent over the network to one or more clients\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnPlayerAddModifiers","insertText":"object OnPlayerAddModifiers(BasePlayer player, Item item, ItemModConsumable consumable)\n{\n    Puts(\"OnPlayerAddModifiers works!\");\n    return null;\n}\n","documentation":"Called after a player consumes an item such as tea that is about to apply modifiers\nReturning a non-null value overrides default behavior (prevents the modifiers from being applied)"},{"category":"Player","label":"OnThreatLevelUpdate","insertText":"object OnThreatLevelUpdate(BasePlayer player)\n{\n    Puts(\"OnThreatLevelUpdate works!\");\n    return null;\n}\n","documentation":"Called when a player's threat level is about to be updated\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"CanUseGesture","insertText":"bool? CanUseGesture(BasePlayer player, GestureConfig gesture)\n{\n    Puts(\"CanUseGesture works!\");\n    return null;\n}\n","documentation":"Called when a player attempts to use a gesture\nReturning true or false overrides default behavior"},{"category":"Player","label":"OnCentralizedBanCheck","insertText":"object OnCentralizedBanCheck(Network.Connection connection)\n{\n    Puts(\"OnCentralizedBanCheck works!\");\n    return null;\n}\n","documentation":"Called when a player is about to be checked in the centralized ban database\nReturning a non-null value cancels default behavior"},{"category":"Player","label":"OnClientCommand","insertText":"object OnClientCommand(Connection connection, string command)\n{\n    Puts(\"OnClientCommand works!\");\n    return null;\n}\n","documentation":"Useful for intercepting players' commands before their handling\nCalled before OnPlayerCommand and OnUserCommand\nReturning a non-null value overrides default behavior"},{"category":"Player","label":"OnCorpsePopulate","insertText":"BaseCorpse OnCorpsePopulate(BasePlayer npcPlayer, BaseCorpse corpse)\n{\n    Puts(\"OnCorpsePopulate works!\");\n    return null;\n}\n","documentation":"Called when an NPC player corpse is about to be populated with loot\nReturning a BaseCorpse overrides default behavior"},{"category":"Player","label":"CanSetRelationship","insertText":"bool? CanSetRelationship(BasePlayer player, BasePlayer otherPlayer, RelationshipManager.RelationshipType relationshipType, int weight)\n{\n    Puts(\"CanSetRelationship works!\");\n    return null;\n}\n","documentation":"Called when a player's relationship with another is about to be updated\nReturning true or false overrides default behavior\n\n "},{"category":"Entity","label":"CanBradleyApcTarget","insertText":"bool CanBradleyApcTarget(BradleyAPC apc, BaseEntity entity)\n{\n    Puts(\"CanBradleyApcTarget works!\");\n    return true;\n}\n","documentation":"Called when an APC targets an entity\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnNpcPlayerResume","insertText":"object OnNpcPlayerResume(NPCPlayerApex npc)\n{\n    Puts(\"OnNpcPlayerResume works!\");\n    return null;\n}\n","documentation":"Useful for canceling the invoke of TryForceToNavmesh\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnNpcDestinationSet","insertText":"object OnNpcDestinationSet(NPCPlayerApex npc, Vector3 newPosition)\n{\n    Puts(\"OnNpcDestinationSet works!\");\n    return null;\n}\n","documentation":"Useful for canceling the destination change on NPCs\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnNpcStopMoving","insertText":"object OnNpcStopMoving(NPCPlayerApex npc)\n{\n    Puts(\"OnNpcStopMoving works!\");\n    return null;\n}\n","documentation":"Useful for denying the move stop of NPCs\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnEntityMarkHostile","insertText":"object OnEntityMarkHostile(BaseCombatEntity entity, float duration)\n{\n    Puts(\"OnEntityMarkHostile works!\");\n    return null;\n}\n","documentation":"Useful for denying marking the entity hostile\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"CanEntityBeHostile","insertText":"object CanEntityBeHostile(BaseCombatEntity entity)\n{\n    Puts(\"CanEntityBeHostile works!\");\n    return null;\n}\n","documentation":"Useful for overriding hostility of an entity\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"CanSamSiteShoot","insertText":"object CanSamSiteShoot(SamSite samSite)\n{\n    Puts(\"CanSamSiteShoot works!\");\n    return null;\n}\n","documentation":"Useful for canceling the shoot of SamSite\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnDieselEngineToggle","insertText":"object OnDieselEngineToggle(DieselEngine engine, BasePlayer player)\n{\n    Puts(\"OnDieselEngineToggle works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to toggle diesel engine\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnDieselEngineToggled","insertText":"void OnDieselEngineToggled(DieselEngine engine)\n{\n    Puts(\"OnDieselEngineToggled works!\");\n}\n","documentation":"Called when diesel engine is toggled\nNo return behavior"},{"category":"Entity","label":"OnExcavatorMiningToggled","insertText":"void OnExcavatorMiningToggled(ExcavatorArm arm)\n{\n    Puts(\"OnExcavatorMiningToggled works!\");\n}\n","documentation":"Called when excavator mining arm is toggled\nNo return behavior"},{"category":"Entity","label":"OnExcavatorGather","insertText":"object OnExcavatorGather(ExcavatorArm arm, Item item)\n{\n    Puts(\"OnExcavatorGather works!\");\n    return null;\n}\n","documentation":"Called right before moving gathered resource to container\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnExcavatorResourceSet","insertText":"object OnExcavatorResourceSet(ExcavatorArm arm, string resourceName, BasePlayer player)\n{\n    Puts(\"OnExcavatorResourceSet works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to set a new resource target\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnInputUpdate","insertText":"object OnInputUpdate(IOEntity entity, int inputAmount, int slot)\n{\n    Puts(\"OnInputUpdate works!\");\n    return null;\n}\n","documentation":"Called when an input of IOEntity is updated\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnOutputUpdate","insertText":"object OnOutputUpdate(IOEntity entity)\n{\n    Puts(\"OnOutputUpdate works!\");\n    return null;\n}\n","documentation":"Called when outputs of IOEntity are updated\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnButtonPress","insertText":"object OnButtonPress(PressButton button, BasePlayer player)\n{\n    Puts(\"OnButtonPress works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to press a button\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnShopAcceptClick","insertText":"object OnShopAcceptClick(ShopFront entity, BasePlayer player)\n{\n    Puts(\"OnShopAcceptClick works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to accept a trade in ShopFront\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnShopCancelClick","insertText":"object OnShopCancelClick(ShopFront entity, BasePlayer player)\n{\n    Puts(\"OnShopCancelClick works!\");\n    return null;\n}\n","documentation":"Called when a player is cancelling a trade\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnShopCompleteTrade","insertText":"object OnShopCompleteTrade(ShopFront entity)\n{\n    Puts(\"OnShopCompleteTrade works!\");\n    return null;\n}\n","documentation":"Called before the trade is completed in ShopFront\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnSamSiteTarget","insertText":"object OnSamSiteTarget(SamSite samSite, BaseCombatEntity target)\n{\n    Puts(\"OnSamSiteTarget works!\");\n    return null;\n}\n","documentation":"Called before last target visible time is updated\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnHelicopterStrafeEnter","insertText":"object OnHelicopterStrafeEnter(PatrolHelicopterAI helicopter, Vector3 strafePosition)\n{\n    Puts(\"OnHelicopterStrafeEnter works!\");\n    return null;\n}\n","documentation":"Called when helicopter is entering strafe\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnSupplyDropLanded","insertText":"void OnSupplyDropLanded(SupplyDrop entity)\n{\n    Puts(\"OnSupplyDropLanded works!\");\n}\n","documentation":"Called after Supply Drop has landed\nNo return behavior"},{"category":"Entity","label":"OnEntityStabilityCheck","insertText":"object OnEntityStabilityCheck(StabilityEntity entity)\n{\n    Puts(\"OnEntityStabilityCheck works!\");\n    return null;\n}\n","documentation":"Called when stability of an entity is checked\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnBuildingPrivilege","insertText":"BuildingPrivlidge OnBuildingPrivilege(BaseEntity entity, OBB obb)\n{\n    Puts($\"Getting a building privilege for {entity.ShortPrefabName}!\");\n    return null;\n}\n","documentation":"Useful for overriding a building privilege on specific entities and etc.\nReturning BuildingPrivlidge value overrides default behavior"},{"category":"Entity","label":"OnHorseLead","insertText":"object OnHorseLead(BaseRidableAnimal animal, BasePlayer player)\n{\n    Puts($\"{player.displayName} tries to lead {animal.ShortPrefabName}\");\n    return null;\n}\n","documentation":"Called when a player tries to lead a horse\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnHorseHitch","insertText":"object OnHorseHitch(RidableHorse horse, HitchTrough hitch)\n{\n    Puts(\"OnHorseHitch works!\");\n    return null;\n}\n","documentation":"Called just before setting the hitch\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnWireConnect","insertText":"object OnWireConnect(BasePlayer player, IOEntity entity1, int inputs, IOEntity entity2, int outputs)\n{\n    Puts(\"OnWireConnect works!\");\n    return null;\n}\n","documentation":"Useful for preventing a wire to connect\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnWireClear","insertText":"object OnWireClear(BasePlayer player, IOEntity entity1, int connected, IOEntity entity2, bool flag)\n{\n    Puts(\"OnWireClear works!\");\n    return null;\n}\n","documentation":"Useful for preventing clearing wires\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnReactiveTargetReset","insertText":"void OnReactiveTargetReset(ReactiveTarget target)\n{\n    Puts(\"OnReactiveTargetReset works!\");\n}\n","documentation":"Called after the reactive target is reset\nNo return behaviour"},{"category":"Entity","label":"OnMlrsFire","insertText":"object OnMlrsFire(MLRS mlrs, BasePlayer player)\n{\n    Puts(\"OnMlrsFire works!\");\n    return null;\n}\n","documentation":"Called just before the MLRS is fired.\nReturning a non-null value overrides default behaviour."},{"category":"Entity","label":"OnMlrsFired","insertText":"void OnMlrsFired(MLRS mlrs, BasePlayer player)\n{\n    Puts(\"OnMlrsFired works!\");\n}\n","documentation":"Called just after the MLRS has been fired.\nNo return behaviour."},{"category":"Entity","label":"OnTurretAssign","insertText":"object OnTurretAssign(AutoTurret turret, ulong targetId, BasePlayer initiator)\n{\n    Puts(\"{targetId} has been authorized on a turret by {initiator.displayName}\");\n    return null;\n}\n","documentation":"Called when a player attempts to authorize another player on a turret\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnTurretAssigned","insertText":"void OnTurretAssigned(AutoTurret turret, ulong targetId, BasePlayer initiator)\n{\n    Puts($\"{targetId} has been authorized on a turret by {initiator.displayName});\n}\n","documentation":"Called when a player has been authorized on a turret by another player\nNo return behaviour"},{"category":"Entity","label":"CanHelicopterDropCrate","insertText":"bool CanHelicopterDropCrate(CH47HelicopterAIController heli)\n{\n    Puts(\"CanHelicopterDropCrate works!\");\n    return true;\n}\n","documentation":"Called when a CH47 helicopter attempts to drop a crate\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnEngineLoadoutRefresh","insertText":"object OnEngineLoadoutRefresh(EngineStorage storage)\n{\n    Puts(\"OnEngineLoadoutRefresh works!\");\n    return null;\n}\n","documentation":"Called before engine loadout data is refreshed\nReturning a non-null value overrides default behaviour"},{"category":"Entity","label":"CanHelicopterStrafe","insertText":"bool CanHelicopterStrafe(PatrolHelicopterAI heli)\n{\n    Puts(\"CanHelicopterStrafe works!\");\n    return true;\n}\n","documentation":"Called when a patrol helicopter attempts to strafe\nReturning true or false overrides default behavior"},{"category":"Entity","label":"CanHelicopterStrafeTarget","insertText":"bool CanHelicopterStrafeTarget(PatrolHelicopterAI entity, BasePlayer target)\n{\n    Puts(\"CanHelicopterStrafeTarget works!\");\n    return true;\n}\n","documentation":"Called when a patrol helicopter attempts to target a player to attack while strafing\nReturning true or false overrides default behavior"},{"category":"Entity","label":"CanHelicopterTarget","insertText":"bool CanHelicopterTarget(PatrolHelicopterAI heli, BasePlayer player)\n{\n    Puts(\"CanHelicopterTarget works!\");\n    return true;\n}\n","documentation":"Called when a patrol helicopter attempts to target a player to attack\nReturning true or false overrides default behavior"},{"category":"Entity","label":"CanHelicopterUseNapalm","insertText":"bool CanHelicopterUseNapalm(PatrolHelicopterAI heli)\n{\n    Puts(\"CanHelicopterUseNapalm works!\");\n    return true;\n}\n","documentation":"Called when a patrol helicopter attempts to use napalm\nReturning true or false overrides default behavior"},{"category":"Entity","label":"CanNetworkTo","insertText":"bool CanNetworkTo(BaseNetworkable entity, BasePlayer target)\n{\n    Puts(\"CanNetworkTo works!\");\n    return true;\n}\n","documentation":"Called when an entity attempts to network with a player\nFor better performance, avoid using heavy calculations in this hook.\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnHelicopterRetire","insertText":"object OnHelicopterRetire(PatrolHelicopterAI helicopter)\n{\n    Puts(\"OnHelicopterRetire works!\");\n    return null;\n}\n","documentation":"Called before the patrol helicopter starts leaving the map.\nReturning a non-null value overrides default behaviour."},{"category":"Entity","label":"CanNpcAttack","insertText":"bool CanNpcAttack(BaseNpc npc, BaseEntity target)\n{\n    Puts(\"CanNpcAttack works!\");\n    return true;\n}\n","documentation":"Called when a NPC attempts to attack another entity\nReturning true or false overrides default behavior"},{"category":"Entity","label":"CanNpcEat","insertText":"bool CanNpcEat(BaseNpc npc, BaseEntity target)\n{\n    Puts(\"CanNpcEat works!\");\n    return true;\n}\n","documentation":"Called when a NPC attempts to eat another entity\nReturning true or false overrides default behavior"},{"category":"Entity","label":"CanRecycle","insertText":"bool CanRecycle(Recycler recycler, Item item)\n{\n    Puts(\"CanRecycle works!\");\n    return true;\n}\n","documentation":"Called when the recycler attempts to recycle an item\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnAirdrop","insertText":"void OnAirdrop(CargoPlane plane, Vector3 dropPosition)\n{\n    Puts(\"OnAirdrop works!\");\n}\n","documentation":"Called when an airdrop has been called\nNo return behavior"},{"category":"Entity","label":"OnBradleyApcInitialize","insertText":"object OnBradleyApcInitialize(BradleyAPC apc)\n{\n    Puts(\"OnBradleyApcInitialize works!\");\n    return null;\n}\n","documentation":"Called when an APC initializes\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBradleyApcHunt","insertText":"object OnBradleyApcHunt(BradleyAPC apc)\n{\n    Puts(\"OnBradleyApcHunt works!\");\n    return null;\n}\n","documentation":"Called when an APC starts hunting\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBradleyApcPatrol","insertText":"object OnBradleyApcPatrol(BradleyAPC apc)\n{\n    Puts(\"OnBradleyApcPatrol works!\");\n    return null;\n}\n","documentation":"Called when an APC is starts patrolling\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnContainerDropItems","insertText":"object OnContainerDropItems(ItemContainer container)\n{\n    Puts(\"OnContainerDropItems works!\");\n    return null;\n}\n","documentation":"Called when a container is destroyed and all items are about to be dropped\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnCrateDropped","insertText":"void OnCrateDropped(HackableLockedCrate crate)\n{\n    Puts(\"OnCrateDropped works!\");\n}\n","documentation":"Called when a locked crate from the CH47 (Chinook) has dropped\nNo return behavior"},{"category":"Entity","label":"OnCrateHack","insertText":"void OnCrateHack(HackableLockedCrate crate)\n{\n    Puts(\"OnCrateHack works!\");\n}\n","documentation":"Called when a player starts hacking a locked crate\nNo return behavior"},{"category":"Entity","label":"OnCrateHackEnd","insertText":"void OnCrateHackEnd(HackableLockedCrate crate)\n{\n    Puts(\"OnCrateHackEnd works!\");\n}\n","documentation":"Called when a player stops hacking a locked crate\nNo return behavior"},{"category":"Entity","label":"OnCrateLanded","insertText":"void OnCrateLanded(HackableLockedCrate crate)\n{\n    Puts(\"OnCrateLanded works!\");\n}\n","documentation":"Called when a locked crate from the CH47 (Chinook) has landed\nNo return behavior"},{"category":"Entity","label":"OnEntityDeath","insertText":"void OnEntityDeath(BaseCombatEntity entity, HitInfo info)\n{\n    Puts(\"OnEntityDeath works!\");\n}\n","documentation":"HitInfo might be null, check it before use\nEditing hitInfo has no effect because the death has already happened\nNo return behavior"},{"category":"Entity","label":"OnEntityDismounted","insertText":"void OnEntityDismounted(BaseMountable entity, BasePlayer player)\n{\n    Puts(\"OnEntityDismounted works!\");\n}\n","documentation":"Called when an entity is dismounted by a player\nNo return behavior"},{"category":"Entity","label":"OnEntityEnter","insertText":"void OnEntityEnter(TriggerBase trigger, BaseEntity entity)\n{\n    Puts(\"OnEntityEnter works!\");\n}\n","documentation":"Called when an entity enters a trigger (water area, radiation zone, hurt zone, etc.)\nNo return behavior"},{"category":"Entity","label":"OnEntityGroundMissing","insertText":"object OnEntityGroundMissing(BaseEntity entity)\n{\n    Puts(\"OnEntityGroundMissing works!\");\n    return null;\n}\n","documentation":"Called when an entity (sleepingbag, sign, furnace,...) is going to be destroyed because the buildingblock it is on was removed\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnEntityKill","insertText":"object OnEntityKill(BaseNetworkable entity)\n{\n    Puts(\"OnEntityKill works!\");\n    return null;\n}\n","documentation":"Called when an entity is destroyed\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnEntityLeave","insertText":"void OnEntityLeave(TriggerBase trigger, BaseEntity entity)\n{\n    Puts(\"OnEntityLeave works!\");\n}\n","documentation":"Called when an entity leaves a trigger (water area, radiation zone, hurt zone, etc.)\nNo return behavior"},{"category":"Entity","label":"OnEntityMounted","insertText":"void OnEntityMounted(BaseMountable entity, BasePlayer player)\n{\n    Puts(\"OnEntityMounted works!\");\n}\n","documentation":"Called when an entity is mounted by a player\nNo return behavior"},{"category":"Entity","label":"OnEntitySpawned","insertText":"void OnEntitySpawned(BaseNetworkable entity)\n{\n    Puts(\"OnEntitySpawned works!\");\n}\n","documentation":"Called after any networked entity has spawned (including trees)\nNo return behavior"},{"category":"Entity","label":"OnEntityTakeDamage","insertText":"object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)\n{\n    Puts(\"OnEntityTakeDamage works!\");\n    return null;\n}\n","documentation":"Alternatively, modify the HitInfo object to change the damage\nIt should be okay to set the damage to 0, but if you don't return non-null, the player's client will receive a damage indicator (if entity is a BasePlayer)\nHitInfo has all kinds of useful things in it, such as Weapon, damageProperties or damageTypes"},{"category":"Entity","label":"OnFireBallDamage","insertText":"void OnFireBallDamage(FireBall fire, BaseCombatEntity entity, HitInfo info)\n{\n    Puts(\"OnFireBallDamage works!\");\n}\n","documentation":"Called when a fire ball does damage to another entity\nNo return behavior"},{"category":"Entity","label":"OnFireBallSpread","insertText":"void OnFireBallSpread(FireBall ball, BaseEntity fire)\n{\n    Puts(\"OnFireBallSpread works!\");\n}\n","documentation":"Called when a fire ball fire spreads\nNo return behavior"},{"category":"Entity","label":"OnFlameExplosion","insertText":"void OnFlameExplosion(FlameExplosive explosive, BaseEntity flame)\n{\n    Puts(\"OnFlameExplosion works!\");\n}\n","documentation":"Called when a flame explodes\nNo return behavior"},{"category":"Entity","label":"OnHelicopterAttack","insertText":"object OnHelicopterAttack(CH47HelicopterAIController heli)\n{\n    Puts(\"OnHelicopterAttack works!\");\n    return null;\n}\n","documentation":"Called when a CH47 helicopter is being attacked\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnHelicopterDropCrate","insertText":"object OnHelicopterDropCrate(CH47HelicopterAIController heli)\n{\n    Puts(\"OnHelicopterDropCrate works!\");\n    return null;\n}\n","documentation":"Called when a CH47 helicopter is dropping a crate\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnHelicopterDropDoorOpen","insertText":"object OnHelicopterDropDoorOpen(CH47HelicopterAIController heli)\n{\n    Puts(\"OnHelicopterDropDoorOpen works!\");\n    return null;\n}\n","documentation":"Called when a CH47 helicopter is opening its drop door\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnHelicopterKilled","insertText":"object OnHelicopterKilled(CH47HelicopterAIController heli)\n{\n    Puts(\"OnHelicopterKilled works!\");\n    return null;\n}\n","documentation":"Called when a CH47 helicopter is going to be killed\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnHelicopterOutOfCrates","insertText":"bool? OnHelicopterOutOfCrates(CH47HelicopterAIController heli)\n{\n    Puts(\"OnHelicopterOutOfCrates works!\");\n    return null;\n}\n","documentation":"Called when a CH47 helicopter runs out of crates\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnHelicopterTarget","insertText":"object OnHelicopterTarget(HelicopterTurret turret, BaseCombatEntity entity)\n{\n    Puts(\"OnHelicopterTarget works!\");\n    return null;\n}\n","documentation":"Called when a helicopter turret attempts to target an entity\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnLiftUse","insertText":"object OnLiftUse(Lift lift, BasePlayer player)\n{\n    Puts(\"OnLiftUse works!\");\n    return null;\n}\n","documentation":"Called when a player calls a lift or procedural lift\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnLootSpawn","insertText":"object OnLootSpawn(LootContainer container)\n{\n    Puts(\"OnLootSpawn works!\");\n    return null;\n}\n","documentation":"Called when loot spawns in a container\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnNpcTargetSense","insertText":"object OnNpcTargetSense(BaseEntity owner, BaseEntity entity, AIBrainSenses brainSenses)\n{\n    Puts(\"OnNpcTargetSense works!\");\n    return null;\n}\n","documentation":"Called when an NPC becomes aware of another entity\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnNpcTarget","insertText":"object OnNpcTarget(BaseEntity npc, BaseEntity entity)\n{\n    Puts(\"OnNpcTarget works!\");\n    return null;\n}\n","documentation":"Called when an NPC targets another entity\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnOvenToggle","insertText":"object OnOvenToggle(BaseOven oven, BasePlayer player)\n{\n    Puts(\"OnOvenToggle works!\");\n    return null;\n}\n","documentation":"Called when an oven (Campfire, Furnace,...) is turned on or off\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnItemRecycle","insertText":"object OnItemRecycle(Item item, Recycler recycler)\n{\n    Puts(\"OnItemRecycle works!\");\n    return null;\n}\n","documentation":"Called when an item is recycled in a recycler\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnOvenCook","insertText":"object OnOvenCook(BaseOven oven, Item item)\n{\n    Puts(\"OnOvenCook works!\");\n    return null;\n}\n","documentation":"Called before an oven cooks an item\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnOvenCooked","insertText":"void OnOvenCooked(BaseOven oven, Item item, BaseEntity slot)\n{\n    Puts(\"OnOvenCooked works!\");\n}\n","documentation":"Called after an oven cooks an item\nNo return behavior"},{"category":"Entity","label":"OnRecyclerToggle","insertText":"object OnRecyclerToggle(Recycler recycler, BasePlayer player)\n{\n    Puts(\"OnRecyclerToggle works!\");\n    return null;\n}\n","documentation":"Called when a recycler is turned on or off\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnResourceDepositCreated","insertText":"void OnResourceDepositCreated(ResourceDepositManager.ResourceDeposit deposit)\n{\n    Puts(\"OnResourceDepositCreated works!\");\n}\n","documentation":"Called when a resource deposit has been created\nNo return behavior"},{"category":"Entity","label":"OnShopCompleteTrade","insertText":"object OnShopCompleteTrade(ShopFront shop, BasePlayer customer)\n{\n    Puts(\"OnShopCompleteTrade works!\");\n    return null;\n}\n","documentation":"Called when a shopfront trade is complete\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnTurretAuthorize","insertText":"object OnTurretAuthorize(AutoTurret turret, BasePlayer player)\n{\n    Puts(\"OnTurretAuthorize works!\");\n    return null;\n}\n","documentation":"Called when a player attempts to authorize on a turret\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnTurretClearList","insertText":"object OnTurretClearList(AutoTurret turret, BasePlayer player)\n{\n    Puts(\"OnTurretClearList works!\");\n    return null;\n}\n","documentation":"Called when a player attempts to clear an autoturret's authorized list\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnTurretDeauthorize","insertText":"object OnTurretDeauthorize(AutoTurret turret, BasePlayer player)\n{\n    Puts(\"OnTurretDeauthorize works!\");\n    return null;\n}\n","documentation":"Called when a player is deauthorized on an autoturret\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnTurretModeToggle","insertText":"void OnTurretModeToggle(AutoTurret turret)\n{\n    Puts(\"OnTurretModeToggle works!\");\n}\n","documentation":"Called when the mode of an autoturrent is toggled\nNo return behavior"},{"category":"Entity","label":"OnTurretShutdown","insertText":"object OnTurretShutdown(AutoTurret turret)\n{\n    Puts(\"OnTurretShutdown works!\");\n    return null;\n}\n","documentation":"Called when an autoturret is shut down\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnTurretStartup","insertText":"object OnTurretStartup(AutoTurret turret)\n{\n    Puts(\"OnTurretStartup works!\");\n    return null;\n}\n","documentation":"Called when an autoturret starts up\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnTurretTarget","insertText":"object OnTurretTarget(AutoTurret turret, BaseCombatEntity entity)\n{\n    Puts(\"OnTurretTarget works!\");\n    return null;\n}\n","documentation":"Called when an autoturret attempts to target an entity\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnTurretToggle","insertText":"object OnTurretToggle(AutoTurret turret)\n{\n    Puts(\"OnTurretToggle works!\");\n    return null;\n}\n","documentation":"Called when an autoturret toggles powerstate (on/off)\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBigWheelWin","insertText":"object OnBigWheelWin(BigWheelGame bigWheel, Item scrap, BigWheelBettingTerminal terminal, int multiplier)\n{\n    Puts(\"OnBigWheelWin works!\");\n    return null;\n}\n","documentation":"Called before multiplier is applied.\nReturning non-null value overrides default behaviour."},{"category":"Entity","label":"OnBigWheelLoss","insertText":"void OnBigWheelLoss(BigWheelGame wheel, Item item)\n{\n    Puts(\"OnBigWheelLoss works!\");\n}\n","documentation":"Called when a specific item is lost on the big wheel game\nNo return behavior"},{"category":"Entity","label":"OnSolarPanelSunUpdate","insertText":"object OnSolarPanelSunUpdate(SolarPanel panel, int currentEnergy)\n{\n    Puts(\"OnSolarPanelSunUpdate works!\");\n    return null;\n}\n","documentation":"Called when a solar panel updates the amount of energy it is getting from the sun\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBookmarkControl","insertText":"object OnBookmarkControl(ComputerStation computerStation, BasePlayer player, string bookmarkName, IRemoteControllable remoteControllable)\n{\n    Puts(\"OnBookmarkControl works!\");\n    return null;\n}\n","documentation":"Called when a player tries to select a bookmark at a computer station\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBookmarkControlStarted","insertText":"void OnBookmarkControlStarted(ComputerStation computerStation, BasePlayer player, string bookmarkName, IRemoteControllable remoteControllable)\n{\n    Puts(\"OnBookmarkControlStarted works!\");\n}\n","documentation":"Called after a player has selected a bookmark at a computer station\nNo return behavior"},{"category":"Entity","label":"OnBookmarkDelete","insertText":"object OnBookmarkDelete(ComputerStation computerStation, BasePlayer player, string bookmarkName)\n{\n    Puts(\"OnBookmarkDelete works!\");\n    return null;\n}\n","documentation":"Called when a player tries to delete a bookmark at a computer station\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBookmarkAdd","insertText":"object OnBookmarkAdd(ComputerStation computerStation, BasePlayer player, string bookmarkName)\n{\n    Puts(\"OnBookmarkAdd works!\");\n    return null;\n}\n","documentation":"Called when a player tries to add a bookmark at a computer station\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBookmarksSendControl","insertText":"object OnBookmarksSendControl(ComputerStation computerStation, BasePlayer player, string bookmarks)\n{\n    Puts(\"OnBookmarksSendControl works!\");\n    return null;\n}\n","documentation":"Called when a player is being sent a list of bookmarks for a computer station\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBookmarkControlEnd","insertText":"object OnBookmarkControlEnd(ComputerStation computerStation, BasePlayer player, BaseEntity controlledEntity)\n{\n    Puts(\"OnBookmarkControlEnd works!\");\n    return null;\n}\n","documentation":"Called when a player tries to stop viewing/controlling an entity at a computer station\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnBookmarkControlEnded","insertText":"void OnBookmarkControlEnded(ComputerStation computerStation, BasePlayer player, BaseEntity controlledEntity)\n{\n    Puts(\"OnBookmarkControlEnded works!\");\n}\n","documentation":"Called after a player has stopped viewing/controlling an entity at a computer station\nNo return behavior"},{"category":"Entity","label":"OnRfBroadcasterAdd","insertText":"object OnRfBroadcasterAdd(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfBroadcasterAdd works!\");\n    return null;\n}\n","documentation":"Called right before an object starts broadcasting an RF frequency\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnRfBroadcasterAdded","insertText":"void OnRfBroadcasterAdded(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfBroadcasterAdded works!\");\n}\n","documentation":"Called right after an object has started broadcasting an RF frequency\nNo return behavior"},{"category":"Entity","label":"OnRfBroadcasterRemove","insertText":"object OnRfBroadcasterRemove(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfBroadcasterRemove works!\");\n    return null;\n}\n","documentation":"Called right before an object stops broadasting an RF frequency\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnRfBroadcasterRemoved","insertText":"void OnRfBroadcasterRemoved(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfBroadcasterRemoved works!\");\n}\n","documentation":"Called right after an object has stopped broadcasting an RF frequency\nNo return behavior"},{"category":"Entity","label":"OnRfListenerAdd","insertText":"object OnRfListenerAdd(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfListenerAdd works!\");\n    return null;\n}\n","documentation":"Called right before an object starts listening to an RF frequency\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnRfListenerAdded","insertText":"void OnRfListenerAdded(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfListenerAdded works!\");\n}\n","documentation":"Called right after an object has started listening to an RF frequency\nNo return behavior"},{"category":"Entity","label":"OnRfListenerRemove","insertText":"object OnRfListenerRemove(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfListenerRemove works!\");\n    return null;\n}\n","documentation":"Called right before an object stops listening to an RF frequency\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnRfListenerRemoved","insertText":"void OnRfListenerRemoved(IRFObject obj, int frequency)\n{\n    Puts(\"OnRfListenerRemoved works!\");\n}\n","documentation":"Called right after an object has stopped listening to an RF frequency\nNo return behavior"},{"category":"Entity","label":"OnSleepingBagDestroy","insertText":"object OnSleepingBagDestroy(SleepingBag sleepingBag, BasePlayer player)\n{\n    Puts(\"OnSleepingBagDestroy works!\");\n    return null;\n}\n","documentation":"Called when a player tries to remove a sleeping bag from their respawn screen\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnRfFrequencyChange","insertText":"object OnRfFrequencyChange(IRFObject obj, int frequency, BasePlayer player)\n{\n    Puts(\"OnRfFrequencyChange works!\");\n    return null;\n}\n","documentation":"Called when a player tries to change the frequency of an RF broadcaster or receiver\nReturning a non-null value overrides default behavior\nUseful for preventing particular reserved frequencies from being selected"},{"category":"Entity","label":"OnRfFrequencyChanged","insertText":"void OnRfFrequencyChanged(IRFObject obj, int frequency, BasePlayer player)\n{\n    Puts(\"OnRfFrequencyChanged works!\");\n}\n","documentation":"Called after a player has changed the frequency of an RF broadcaster or receiver\nNo return behavior"},{"category":"Entity","label":"OnSleepingBagDestroyed","insertText":"void OnSleepingBagDestroyed(SleepingBag sleepingBag, BasePlayer player)\n{\n    Puts(\"OnSleepingBagDestroyed works!\");\n}\n","documentation":"Called after a player removes a sleeping bag from their respawn screen\nNo return behavior"},{"category":"Entity","label":"OnNetworkSubscriptionsUpdate","insertText":"object OnNetworkSubscriptionsUpdate(Network.Networkable networkable, List<Network.Visibility.Group> groupsToAdd, List<Network.Visibility.Group> groupsToRemove)\n{\n    Puts(\"OnNetworkSubscriptionsUpdate works!\");\n}\n","documentation":"Called after the Rust has determined which network groups to subscribe a player to (`groupsToAdd`), and which network groups to unsubscribe the player from (`groupsToRemove`)\nReturning a non-null value prevents Rust from applying the proposed subscription changes\nThis hook is useful for situations where you want to subscribe a player to a network group that is outside their network range -- To do so, you can prevent Rust from automatically unsubscribing them by removing that group from the `groupsToRemove` list"},{"category":"Entity","label":"OnBookmarkInput","insertText":"object OnBookmarkInput(ComputerStation computerStation, BasePlayer player, InputState inputState)\n{\n    Puts(\"OnBookmarkInput works!\");\n    return null;\n}\n","documentation":"Called when input is received from a player who is using a computer station with a bookmark selected\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnEntityControl","insertText":"object OnEntityControl(IRemoteControllable entity)\n{\n    Puts(\"OnEntityControl works!\");\n    return null;\n}\n","documentation":"Called when a player tries to remote control an entity\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnTurretRotate","insertText":"object OnTurretRotate(AutoTurret turret, BasePlayer player)\n{\n    Puts(\"OnTurretRotate works!\");\n    return null;\n}\n","documentation":"Called when a player tries to rotate an auto turret\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnCounterTargetChange","insertText":"object OnCounterTargetChange(PowerCounter counter, BasePlayer player, int targetNumber)\n{\n    Puts(\"OnCounterTargetChange works!\");\n    return null;\n}\n","documentation":"Called when a player tries to change the target number of a power counter\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnCounterModeToggle","insertText":"object OnCounterModeToggle(PowerCounter counter, BasePlayer player, bool mode)\n{\n    Puts(\"OnCounterModeToggle works!\");\n    return null;\n}\n","documentation":"Called when a player ties to toggle a power counter between modes\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnSwitchToggle","insertText":"object OnSwitchToggle(IOEntity entity, BasePlayer player)\n{\n    Puts(\"OnSwitchToggle works!\");\n    return null;\n}\n","documentation":"Called when a player tries to switch and ElectricSwitch or FuelGenerator\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnSwitchToggled","insertText":"void OnSwitchToggled(IOEntity entity, BasePlayer player)\n{\n    Puts(\"OnSwitchToggled works!\");\n}\n","documentation":"Called right after a player switches an ElectricSwitch or FuelGenerator\nNo return behavior"},{"category":"Entity","label":"OnEntityDestroy","insertText":"object OnEntityDestroy(BaseCombatEntity entity)\n{\n    Puts(\"OnEntityDestroy works!\");\n    return null;\n}\n","documentation":"Called right before a CH47Helicopter or BradleyAPC is destroyed\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnElevatorButtonPress","insertText":"object OnElevatorButtonPress(ElevatorLift lift, BasePlayer player, Elevator.Direction direction, bool toTopOrBottom)\n{\n    Puts(\"OnElevatorButtonPress works!\");\n    return null;\n}\n","documentation":"Called when a player presses a button on an elevator lift\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnElevatorCall","insertText":"object OnElevatorCall(Elevator elevator, Elevator topElevator)\n{\n    Puts(\"OnElevatorCall works!\");\n    return null;\n}\n","documentation":"Called when an elevator lift is called to a specific floor by electricity\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnElevatorMove","insertText":"object OnElevatorMove(Elevator topElevator, int targetFloor)\n{\n    Puts(\"OnElevatorMove works!\");\n    return null;\n}\n","documentation":"Called right before an elevator starts moving to the target floor\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"CanSwapToSeat","insertText":"bool CanSwapToSeat(BasePlayer player, BaseMountable mountable)\n{\n    Puts(\"CanSwapToSeat works!\");\n    return true;\n}\n","documentation":"Called when a player tries to switch seats, to determine whether each seat is eligible to be swapped to\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnRidableAnimalClaim","insertText":"object OnRidableAnimalClaim(BaseRidableAnimal animal, BasePlayer player)\n{\n    Puts(\"OnRidableAnimalClaim works!\");\n    return null;\n}\n","documentation":"Called when a player tries to claim a horse\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnRidableAnimalClaimed","insertText":"void OnRidableAnimalClaimed(BaseRidableAnimal animal, BasePlayer player)\n{\n    Puts(\"OnRidableAnimalClaimed works!\");\n}\n","documentation":"Called after a player has claimed a horse\nNo return behavior"},{"category":"Entity","label":"OnEntitySaved","insertText":"void OnEntitySaved(BaseNetworkable entity, BaseNetworkable.SaveInfo saveInfo)\n{\n    Puts(\"OnEntitySaved works!\");\n}\n","documentation":"Called after a BaseNetworkable has been saved to a ProtoBuf object and is about to be serialized to a network stream or network cache\nNo return behavior"},{"category":"Entity","label":"OnEntitySnapshot","insertText":"object OnEntitySnapshot(BaseNetworkable entity, Connection connection)\n{\n    Puts(\"OnEntitySnapshot works!\");\n    return null;\n}\n","documentation":"Called when an entity snapshot is about to be sent to a client connection\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnIORefCleared","insertText":"void OnIORefCleared(IOEntity.IORef ioRef, IOEntity ioEntity)\n{\n    Puts(\"OnIORefCleared works!\");\n}\n","documentation":"Called after a wire has been disconnected from an electrical entity, such as when its connected entity was destroyed or when a player removed the wire\nNo return behavior"},{"category":"Entity","label":"OnEntityFlagsNetworkUpdate","insertText":"object OnEntityFlagsNetworkUpdate(BaseEntity entity)\n{\n    Puts(\"OnEntityFlagsNetworkUpdate works!\");\n    return null;\n}\n","documentation":"Called after an entity's flags have been updated on the server, before they are sent over the network\nReturning a non-null value overrides default behavior"},{"category":"Entity","label":"OnSupplyDropDropped","insertText":"void OnSupplyDropDropped(SupplyDrop supplyDrop, CargoPlane cargoPlane)\n{\n    Puts(\"OnSupplyDropDropped works!\");\n}\n","documentation":"Called right after a cargo plane has dropped a supply drop\nNo return behavior"},{"category":"Entity","label":"OnCargoPlaneSignaled","insertText":"void OnCargoPlaneSignaled(CargoPlane cargoPlane, SupplySignal supplySignal)\n{\n    Puts(\"OnCargoPlaneSignaled works!\");\n}\n","documentation":"Called right after a supply signal has called a cargo plane\nNo return behavior"},{"category":"Entity","label":"OnWaterPurify","insertText":"object OnWaterPurify(WaterPurifier waterPurifier, float timeCooked)\n{\n    Puts(\"OnWaterPurify works!\");\n    return null;\n}\n","documentation":"Called when salt water is about to be converted to fresh water in a water purifier\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnWaterPurified","insertText":"void OnWaterPurified(WaterPurifier waterPurifier, float timeCooked)\n{\n    Puts(\"OnWaterPurified works!\");\n}\n","documentation":"Called after salt water has been converted to fresh water in a water purifier\nNo return behavior"},{"category":"Entity","label":"OnSleepingBagValidCheck","insertText":"bool? OnSleepingBagValidCheck(SleepingBag bag, ulong targetPlayerID, bool ignoreTimers)\n{\n    Puts(\"OnSleepingBagValidCheck works!\");\n    return null;\n}\n","documentation":"Called when determining if a sleeping bag is a valid respawn location for a player\nUseful in conjunction with OnRespawnInformationGiven since a custom sleeping bag will need to pass this check\nReturning true or false overrides default behavior"},{"category":"Entity","label":"OnCCTVDirectionChange","insertText":"object OnCCTVDirectionChange(CCTV_RC camera, BasePlayer player)\n{\n    Puts(\"OnCCTVDirectionChange works!\");\n    return null;\n}\n","documentation":"Called when a player attempts to change the direction of a CCTV camera to face them\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnWaterCollect","insertText":"object OnWaterCollect(WaterCatcher waterCatcher)\n{\n    Puts(\"OnWaterCollect works!\");\n    return null;\n}\n","documentation":"Called when a water catcher is about to collect water\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnLiquidVesselFill","insertText":"object OnLiquidVesselFill(BaseLiquidVessel liquidVessel, BasePlayer player, LiquidContainer facingLiquidContainer)\n{\n    Puts(\"OnLiquidVesselFill works!\");\n    return null;\n}\n","documentation":"Called when a player is attempting to fill a liquid vessel\nReturning a non-null value cancels default behavior"},{"category":"Entity","label":"OnLockerSwap","insertText":"object OnLockerSwap(Locker locker, int startIndex, BasePlayer player)\n{\n    Puts(\"OnLockerSwap works!\");\n    return null;\n}\n","documentation":"Called when a player clicks the \"Swap\" button while viewing a locker interface\nReturning non-null value overrides default behavior"},{"category":"Entity","label":"CanLockerAcceptItem","insertText":"object CanLockerAcceptItem(Locker locker, Item item, int targetPos)\n{\n    Puts(\"CanLockerAcceptItem works!\");\n    return null;\n}\n","documentation":"Called before an item is attempted to be placed inside a locker\nReturning true or false overrides default behavior"},{"category":"Item","label":"CanDropActiveItem","insertText":"bool CanDropActiveItem(BasePlayer player)\n{\n    Puts(\"CanDropActiveItem works!\");\n    return true;\n}\n","documentation":"Called when a player attempts to drop their active item\nReturning true or false overrides default behavior"},{"category":"Item","label":"OnMapImageUpdated","insertText":"void OnMapImageUpdated()\n{\n    Puts(\"OnMapImageUpdated works!\");\n}\n","documentation":"Called when player updates map item's image\nUseful for executing any action when map image is updated\nNo return behavior"},{"category":"Item","label":"OnItemRemove","insertText":"// Example that stops item from being destroyed\n\nobject OnItemRemove(Item item)\n{\n    Puts(\"OnItemRemove works!\");\n    return null;\n}\n","documentation":"Called before an item is destroyed\nReturn a non-null value stop item from being destroyed"},{"category":"Item","label":"OnCardSwipe","insertText":"object OnCardSwipe(CardReader cardReader, Keycard card, BasePlayer player)\n{\n    Puts(\"OnCardSwipe works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to swipe a card\nReturning a non-null value cancels default behavior"},{"category":"Item","label":"CanAcceptItem","insertText":"ItemContainer.CanAcceptResult? CanAcceptItem(ItemContainer container, Item item, int targetPos)\n{\n    Puts(\"CanAcceptItem works!\");\n    return null;\n}\n","documentation":"Called when attempting to put an item in a container\nReturning CanAcceptResult value overrides default behavior"},{"category":"Item","label":"CanCombineDroppedItem","insertText":"object CanCombineDroppedItem(DroppedItem item, DroppedItem targetItem)\n{\n    Puts(\"CanCombineDroppedItem works!\");\n    return null;\n}\n","documentation":"Called when an item is dropped on another item\nReturning a non-null value overwrites command arguments"},{"category":"Item","label":"CanStackItem","insertText":"bool CanStackItem(Item item, Item targetItem)\n{\n    Puts(\"CanStackItem works!\");\n    return true;\n}\n","documentation":"Called when moving an item onto another item\nReturning true or false overrides default behavior"},{"category":"Item","label":"CanMoveItem","insertText":"object CanMoveItem(Item item, PlayerInventory playerLoot, ItemContainerId targetContainer, int targetSlot, int amount)\n{\n    Puts(\"CanMoveItem works!\");\n    return null;\n}\n","documentation":"Called when moving an item from one inventory slot to another\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnFuelConsume","insertText":"object OnFuelConsume(BaseOven oven, Item fuel, ItemModBurnable burnable)\n{\n    Puts(\"OnFuelConsume works!\");\n    return null;\n}\n","documentation":"Called right before fuel is used (furnace, lanterns, camp fires, etc.)\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnFuelConsumed","insertText":"void OnFuelConsumed(BaseOven oven, Item fuel, ItemModBurnable burnable)\n{\n    Puts(\"OnFuelConsumed works!\");\n}\n","documentation":"Called after fuel is used (furnace, lanterns, camp fires, etc.)\nNo return behavior"},{"category":"Item","label":"OnFindBurnable","insertText":"Item OnFindBurnable(BaseOven oven)\n{\n    Puts(\"OnFindBurnable works!\");\n    return null;\n}\n","documentation":"Called when looking for fuel for the oven\nReturning an Item overrides default behavior"},{"category":"Item","label":"OnHealingItemUse","insertText":"object OnHealingItemUse(MedicalTool tool, BasePlayer player)\n{\n    Puts(\"OnHealingItemUse works!\");\n    return null;\n}\n","documentation":"Called when a player attempts to use a medical tool\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnItemAction","insertText":"object OnItemAction(Item item, string action, BasePlayer player)\n{\n    Puts(\"OnItemAction works!\");\n    return null;\n}\n","documentation":"Called when a button is clicked on an item in the inventory (drop, unwrap, ...)\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnItemAddedToContainer","insertText":"void OnItemAddedToContainer(ItemContainer container, Item item)\n{\n    Puts(\"OnItemAddedToContainer works!\");\n}\n","documentation":"Called right after an item was added to a container\nAn entire stack has to be created, not just adding more wood to a wood stack for example\nNo return behavior"},{"category":"Item","label":"OnItemCraftCancelled","insertText":"void OnItemCraftCancelled(ItemCraftTask task)\n{\n    Puts(\"OnItemCraftCancelled works!\");\n}\n","documentation":"Called before an item has been crafted\nNo return behavior"},{"category":"Item","label":"OnItemCraft","insertText":"object OnItemCraft(ItemCraftTask task, BasePlayer player, Item item)\n{\n    Puts(\"OnItemCraft works!\");\n    return null;\n}\n","documentation":"Called just before an item is added to the crafting queue\nReturning true or false overrides default behavior"},{"category":"Item","label":"OnItemCraftFinished","insertText":"void OnItemCraftFinished(ItemCraftTask task, Item item)\n{\n    Puts(\"OnItemCraftFinished works!\");\n}\n","documentation":"Called right after an item has been crafted\nNo return behavior"},{"category":"Item","label":"OnItemDeployed","insertText":"void OnItemDeployed(Deployer deployer, BaseEntity entity, BaseEntity slotEntity)\n{\n    Puts(\"OnItemDeployed works!\");\n}\n","documentation":"Called right after an item has been deployed\nNo return behavior"},{"category":"Item","label":"OnItemDropped","insertText":"void OnItemDropped(Item item, BaseEntity entity)\n{\n    Puts(\"OnItemDropped works!\");\n}\n","documentation":"Called right after an item has been dropped\nNo return behavior"},{"category":"Item","label":"OnItemPickup","insertText":"object OnItemPickup(Item item, BasePlayer player)\n{\n    Puts(\"OnItemPickup works!\");\n    return null;\n}\n","documentation":"Called right after an item has been picked up\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnItemRemovedFromContainer","insertText":"void OnItemRemovedFromContainer(ItemContainer container, Item item)\n{\n    Puts(\"OnItemRemovedFromContainer works!\");\n}\n","documentation":"Called right after an item was removed from a container\nThe entire stack has to be removed for this to be called, not just a little bit\nNo return behavior"},{"category":"Item","label":"OnItemRepair","insertText":"object OnItemRepair(BasePlayer player, Item item)\n{\n    Puts(\"OnItemRepair works!\");\n    return null;\n}\n","documentation":"Called right before an item is repaired\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnItemResearch","insertText":"void OnItemResearch(ResearchTable table, Item targetItem, BasePlayer player)\n{\n    Puts(\"OnItemResearch works!\");\n}\n","documentation":"Called right before a player begins to research an item\nNo return behavior"},{"category":"Item","label":"OnItemResearched","insertText":"float OnItemResearched(ResearchTable table, float chance)\n{\n    Puts(\"OnItemResearched works!\");\n    return 1;\n}\n","documentation":"Called right before a player finishes researching an item\nReturning a float will affect if researching is successful or not"},{"category":"Item","label":"OnResearchCostDetermine","insertText":"object OnResearchCostDetermine(Item item, ResearchTable researchTable)\n{\n    Puts(\"OnResearchCostDetermine works!\");\n    return null;\n}\n","documentation":"Called when an item is being scrapped at a research table or when a blueprint is being unlocked in a tech tree\nReturning a numeric value (int) overrides the default value"},{"category":"Item","label":"OnItemSplit","insertText":"Item OnItemSplit(Item item, int amount)\n{\n    Puts(\"OnItemSplit works!\");\n    return null;\n}\n","documentation":"Called right before an item is split into multiple stacks\nReturning an Item overrides default behavior"},{"category":"Item","label":"OnItemUpgrade","insertText":"void OnItemUpgrade(Item item, Item upgraded, BasePlayer player)\n{\n    Puts(\"OnItemUpgrade works!\");\n}\n","documentation":"Called right before an item is upgraded\nNo return behavior"},{"category":"Item","label":"OnItemUse","insertText":"int OnItemUse(Item item, int amountToUse)\n{\n    Puts(\"OnItemUse works!\");\n    return amountToUse;\n}\n","documentation":"Called when an item is used\nReturning an int overrides the amount consumed."},{"category":"Item","label":"OnLoseCondition","insertText":"void OnLoseCondition(Item item, ref float amount)\n{\n    Puts(\"OnLoseCondition works!\");\n}\n","documentation":"Called right before the condition of the item is modified\nNo return behavior"},{"category":"Item","label":"OnMaxStackable","insertText":"int OnMaxStackable(Item item)\n{\n    Puts(\"OnMaxStackable works!\");\n    return 1;\n}\n","documentation":"Called when an items max stackable is calculated\nReturning a numeric value (int) overrides the default value"},{"category":"Item","label":"OnTrapArm","insertText":"object OnTrapArm(BearTrap trap, BasePlayer player)\n{\n    Puts(\"OnTrapArm works!\");\n    return null;\n}\n","documentation":"Called when the player arms a bear trap\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnTrapDisarm","insertText":"object OnTrapDisarm(Landmine trap, BasePlayer player)\n{\n    Puts(\"OnTrapDisarm works!\");\n    return null;\n}\n","documentation":"Called when the player disarms a land mine\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnTrapSnapped","insertText":"void OnTrapSnapped(BaseTrapTrigger trap, GameObject go)\n{\n    Puts(\"OnTrapSnapped works!\");\n}\n","documentation":"Called when a trap is triggered by a game object\nNo return behavior"},{"category":"Item","label":"OnTrapTrigger","insertText":"object OnTrapTrigger(BaseTrap trap, GameObject go)\n{\n    Puts(\"OnTrapTrigger works!\");\n    return null;\n}\n","documentation":"Called when a trap is triggered by a game object\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnBonusItemDrop","insertText":"object OnBonusItemDrop(Item item, BasePlayer player)\n{\n    Puts(\"OnBonusItemDrop works!\");\n    return null;\n}\n","documentation":"Called when a loot container is about to drop bonus scrap for a player who has a corresponding tea buff\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnBonusItemDropped","insertText":"void OnBonusItemDropped(Item item, BasePlayer player)\n{\n    Puts(\"OnBonusItemDropped works!\");\n}\n","documentation":"Called after a loot container has dropped bonus scrap for a player who has a corresponding tea buff\nNo return behavior"},{"category":"Item","label":"OnItemRefill","insertText":"object OnItemRefill(Item item, BasePlayer player)\n{\n    Puts(\"OnItemRefill works!\");\n    return null;\n}\n","documentation":"Called right before an item such as a diving tank is repaired without using a repair bench\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnItemLock","insertText":"object OnItemLock(Item item)\n{\n    Puts(\"OnItemLock works!\");\n    return null;\n}\n","documentation":"Called right before an item is locked, such as in a modular car inventory\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnItemUnlock","insertText":"object OnItemUnlock(Item item)\n{\n    Puts(\"OnItemUnlock works!\");\n    return null;\n}\n","documentation":"Called right before an item is unlocked, such as in a modular car inventory\nReturning a non-null value overrides default behavior"},{"category":"Item","label":"OnItemSubmit","insertText":"object OnItemSubmit(Item item, Mailbox mailbox, BasePlayer player)\n{\n    Puts(\"OnItemSubmit works!\");\n    return null;\n}\n","documentation":"Called when a player submits an item into a mailbox or dropbox\nReturning a non-null value cancels default behavior"},{"category":"Item","label":"OnItemStacked","insertText":"void OnItemStacked(Item destinationItem, Item sourceItem, ItemContainer destinationContainer)\n{\n    Puts(\"OnItemStacked works!\");\n}\n","documentation":"Called after an item has been stacked\nNo return behavior"},{"category":"Item","label":"OnIngredientsCollect","insertText":"bool? OnIngredientsCollect(ItemCrafter itemCrafter, ItemBlueprint blueprint, ItemCraftTask task, int amount, BasePlayer player)\n{\n    Puts(\"OnIngredientsCollect works!\");\n    return null;\n}\n","documentation":"Called when ingredients are about to be collected for crafting an item\nReturning a non-null value cancels default behavior"},{"category":"Resource","label":"OnCollectiblePickup","insertText":"object OnCollectiblePickup(CollectibleEntity collectible, BasePlayer player)\n{\n    Puts(\"OnCollectiblePickup works!\");\n    return null;\n}\n","documentation":"Called when the player collects an item\nReturning a non-null value overrides default behavior"},{"category":"Resource","label":"CanTakeCutting","insertText":"object CanTakeCutting(BasePlayer player, GrowableEntity entity)\n{\n    Puts(\"CanTakeCutting works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to take a cutting (clone) of a GrowableEntity\nReturning a non-null value cancels default behavior"},{"category":"Resource","label":"OnQuarryToggled","insertText":"void OnQuarryToggled(MiningQuarry quarry, BasePlayer player)\n{\n    Puts($\"{player.displayName} has toggled a quarry\");\n}\n","documentation":"Called when a quarry has just been toggled\nNo return behavior"},{"category":"Resource","label":"OnGrowableGathered","insertText":"void OnGrowableGathered(GrowableEntity plant, Item item, BasePlayer player)\n{\n    Puts($\"{player.displayName} has gathered {item.info.shortname} x {item.amount}.\");\n}\n","documentation":"Called before the player receives an item from gathering a growable entity\nNo return behavior"},{"category":"Resource","label":"OnRemoveDying","insertText":"object OnRemoveDying(GrowableEntity plant, BasePlayer player)\n{\n    Puts(\"OnRemoveDying works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to harvest a dying growable entity\nReturning a non-null value overrides default behavior"},{"category":"Resource","label":"OnGrowableGather","insertText":"object OnGrowableGather(GrowableEntity plant, BasePlayer player)\n{\n    Puts(\"OnGrowableGather works!\");\n    return null;\n}\n","documentation":"Called when the player gathers a growable entity\nReturning a non-null value overrides default behavior"},{"category":"Resource","label":"OnDispenserBonus","insertText":"void OnDispenserBonus(ResourceDispenser dispenser, BasePlayer player, Item item)\n{\n    Puts(\"OnDispenserBonus works!\");\n}\n","documentation":"Called before the player is given a bonus item for gathering\nReturning an Item replaces the existing Item"},{"category":"Resource","label":"OnDispenserGather","insertText":"object OnDispenserGather(ResourceDispenser dispenser, BasePlayer player, Item item)\n{\n    Puts(\"OnDispenserGather works!\");\n    return null;\n}\n","documentation":"Called before the player is given items from a resource\nReturning a non-null value overrides default behavior"},{"category":"Resource","label":"OnQuarryEnabled","insertText":"void OnQuarryEnabled(MiningQuarry quarry)\n{\n    Puts(\"OnQuarryEnabled works!\");\n}\n","documentation":"Called when a mining quarry is turned on/enabled\nNo return behavior"},{"category":"Resource","label":"OnTreeMarkerHit","insertText":"bool? OnTreeMarkerHit(TreeEntity tree, HitInfo info)\n{\n    Puts(\"OnTreeMarkerHit works!\");\n    return null;\n}\n","documentation":"Called when a player hits a tree with a tool (rock, hatchet, etc.)\nReturning true or false overrides default behaviour"},{"category":"Resource","label":"OnQuarryGather","insertText":"void OnQuarryGather(MiningQuarry quarry, Item item)\n{\n    Puts(\"OnQuarryGather works!\");\n}\n","documentation":"Called before items are gathered from a quarry\nNo return behavior"},{"category":"Resource","label":"OnSurveyGather","insertText":"void OnSurveyGather(SurveyCharge survey, Item item)\n{\n    Puts(\"OnSurveyGather works!\");\n}\n","documentation":"Called before items are gathered from a survey charge\nNo return behavior"},{"category":"Structure","label":"OnCodeEntered","insertText":"object OnCodeEntered(CodeLock codeLock, BasePlayer player, string code)\n{\n    Puts(\"OnCodeEntered works!\");\n    return null;\n}\n","documentation":"Called when the player has entered a code in a codelock\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnCupboardAuthorize","insertText":"object OnCupboardAuthorize(BuildingPrivlidge privilege, BasePlayer player)\n{\n    Puts(\"OnCupboardAuthorize works!\");\n    return null;\n}\n","documentation":"Called when a cupboard attempts to authorize a player\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnCupboardClearList","insertText":"object OnCupboardClearList(BuildingPrivlidge privilege, BasePlayer player)\n{\n    Puts(\"OnCupboardClearList works!\");\n    return null;\n}\n","documentation":"Called when an attempt is made to clear a cupboard authorized list\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnCupboardDeauthorize","insertText":"object OnCupboardDeauthorize(BuildingPrivlidge privilege, BasePlayer player)\n{\n    Puts(\"OnCupboardDeauthorize works!\");\n    return null;\n}\n","documentation":"Called when a cupboard attempts to deauthorize a player\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnDoorClosed","insertText":"void OnDoorClosed(Door door, BasePlayer player)\n{\n    Puts(\"OnDoorClosed works!\");\n}\n","documentation":"Called when the player closed a door\nNo return behavior"},{"category":"Structure","label":"OnDoorOpened","insertText":"void OnDoorOpened(Door door, BasePlayer player)\n{\n    Puts(\"OnDoorOpened works!\");\n}\n","documentation":"Called when the player opened a door\nNo return behavior"},{"category":"Structure","label":"OnDoorKnocked","insertText":"void OnDoorKnocked(Door door, BasePlayer player)\n{\n    Puts(\"OnDoorKnocked works!\");\n}\n","documentation":"Called when the player knocks on a door\nNo return behavior"},{"category":"Structure","label":"OnEntityBuilt","insertText":"void OnEntityBuilt(Planner plan, GameObject go)\n{\n    Puts(\"OnEntityBuilt works!\");\n}\n","documentation":"Called when any structure is built (walls, ceilings, stairs, etc.)\nNo return behavior"},{"category":"Structure","label":"OnHammerHit","insertText":"object OnHammerHit(BasePlayer player, HitInfo info)\n{\n    Puts(\"OnHammerHit works!\");\n    return null;\n}\n","documentation":"Called when the player has hit something with a hammer\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnStructureDemolish","insertText":"object OnStructureDemolish(BaseCombatEntity entity, BasePlayer player, bool immediate)\n{\n    Puts(\"OnStructureDemolish works!\");\n    return null;\n}\n","documentation":"Called when the player selects Demolish or DemolishImmediate from the BuildingBlock or BaseCombatEntity menu\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnStructureRepair","insertText":"object OnStructureRepair(BaseCombatEntity entity, BasePlayer player)\n{\n    Puts(\"OnStructureRepair works!\");\n    return null;\n}\n","documentation":"Called when the player repairs a BuildingBlock or BaseCombatEntity\nReturning a non-null value cancels repair"},{"category":"Structure","label":"OnStructureRotate","insertText":"object OnStructureRotate(BaseCombatEntity entity, BasePlayer player)\n{\n    Puts(\"OnStructureRotate works!\");\n    return null;\n}\n","documentation":"Called when the player rotates a BuildingBlock or BaseCombatEntity\nReturning a non-null value cancels rotate"},{"category":"Structure","label":"OnStructureUpgrade","insertText":"object OnStructureUpgrade(BaseCombatEntity entity, BasePlayer player, BuildingGrade.Enum grade)\n{\n    Puts(\"OnStructureUpgrade works!\");\n    return null;\n}\n","documentation":"Called when the player upgrades the grade of a BuildingBlock or BaseCombatEntity\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnConstructionPlace","insertText":"object OnConstructionPlace(BaseEntity entity, Construction component, Construction.Target constructionTarget, BasePlayer player)\n{\n    Puts(\"OnConstructionPlace works!\");\n    return null;\n}\n","documentation":"Called when a player tries to place a building block\nReturning a non-null value overrides default behavior"},{"category":"Structure","label":"OnBuildingSplit","insertText":"void OnBuildingSplit(BuildingManager.Building building, uint newBuildingId)\n{\n    Puts(\"OnBuildingSplit works!\");\n}\n","documentation":"Called when a building is split into two\nNo return behavior"},{"category":"Terrain","label":"OnTerrainInitialized","insertText":"void OnTerrainInitialized()\n{\n    Puts(\"OnTerrainInitialized works!\");\n}\n","documentation":"Called after the terrain generation process has completed\nNo return behavior"},{"category":"Vending","label":"CanAdministerVending","insertText":"bool CanAdministerVending(BasePlayer player, VendingMachine machine)\n{\n    Puts(\"CanAdministerVending works!\");\n    return true;\n}\n","documentation":"Called when a player attempts to administer a vending machine\nReturning true or false overrides default behavior"},{"category":"Vending","label":"OnTakeCurrencyItem","insertText":"object OnTakeCurrencyItem(VendingMachine vending, Item item)\n{\n    Puts(\"OnTakeCurrencyItem works!\");\n    return null;\n}\n","documentation":"Called before currency item is taken\nReturning a non-null value cancels default behavior"},{"category":"Vending","label":"OnGiveSoldItem","insertText":"object OnGiveSoldItem(NPCVendingMachine vending, Item soldItem, BasePlayer buyer)\n{\n    Puts(\"OnGiveSoldItem works!\");\n    return null;\n}\n","documentation":"Called before a sold item is given\nReturning a non-null value cancels default behavior"},{"category":"Vending","label":"OnVendingShopRename","insertText":"object OnVendingShopRename(VendingMachine vending, string newName, BasePlayer player)\n{\n    Puts(\"OnVendingShopRename works!\");\n    return null;\n}\n","documentation":"Called when a player tries to rename vending shop\nReturning a non-null value cancels default behavior"},{"category":"Vending","label":"CanUseVending","insertText":"bool CanUseVending(BasePlayer player, VendingMachine machine)\n{\n    Puts(\"CanUseVending works!\");\n    return true;\n}\n","documentation":"Called when a player attempts to use a vending machine\nReturning true or false overrides default behavior"},{"category":"Vending","label":"CanVendingAcceptItem","insertText":"bool CanVendingAcceptItem(VendingMachine vending, Item item, int targetPos)\n{\n    Puts(\"CanVendingAcceptItem works!\");\n    return true;\n}\n","documentation":"Called when a player attempts to administer a vending machine\nReturning true or false overrides default behavior"},{"category":"Vending","label":"OnAddVendingOffer","insertText":"void OnAddVendingOffer(VendingMachine machine, ProtoBuf.VendingMachine.SellOrder sellOrder)\n{\n    Puts(\"OnAddVendingOffer works!\");\n}\n","documentation":"Called when a sell order/offer is added to a vending machine\nNo return behavior"},{"category":"Vending","label":"OnBuyVendingItem","insertText":"object OnBuyVendingItem(VendingMachine machine, BasePlayer player, int sellOrderId, int numberOfTransactions)\n{\n    Puts(\"OnBuyVendingItem works!\");\n    return null;\n}\n","documentation":"Called when a player buys an item from a vending machine\nReturning a non-null value overrides default behavior"},{"category":"Vending","label":"OnDeleteVendingOffer","insertText":"void OnDeleteVendingOffer(VendingMachine machine, int offerId)\n{\n    Puts(\"OnDeleteVendingOffer works!\");\n}\n","documentation":"Called when a sell order/offer is deleted from a vending machine\nNo return behavior"},{"category":"Vending","label":"OnOpenVendingAdmin","insertText":"void OnOpenVendingAdmin(VendingMachine machine, BasePlayer player)\n{\n    Puts(\"OnOpenVendingAdmin works!\");\n}\n","documentation":"Called when a player opens the admin ui for a vending machine\nNo return behavior"},{"category":"Vending","label":"OnVendingShopOpened","insertText":"void OnVendingShopOpened(VendingMachine machine, BasePlayer player)\n{\n    Puts(\"OnVendingShopOpened works!\");\n}\n","documentation":"Called when a player opens the customer ui for a vending machine\nNo return behavior"},{"category":"Vending","label":"OnRefreshVendingStock","insertText":"void OnRefreshVendingStock(VendingMachine machine, Item item)\n{\n    Puts(\"OnRefreshVendingStock works!\");\n}\n","documentation":"Called when the stock on a vending machine is updated\nNo return behavior"},{"category":"Vending","label":"OnRotateVendingMachine","insertText":"object OnRotateVendingMachine(VendingMachine machine, BasePlayer player)\n{\n    Puts(\"OnRotateVendingMachine works!\");\n    return null;\n}\n","documentation":"Called when a player attempts to rotate a vending machine\nReturning a non-null value overrides default behavior"},{"category":"Vending","label":"OnToggleVendingBroadcast","insertText":"void OnToggleVendingBroadcast(VendingMachine machine, BasePlayer player)\n{\n    Puts(\"OnToggleVendingBroadcast works!\");\n}\n","documentation":"Called when a player toggles the broadcasting of the vending machine\nNo return behavior"},{"category":"Vending","label":"OnVendingTransaction","insertText":"bool OnVendingTransaction(VendingMachine machine, BasePlayer buyer, int sellOrderId, int numberOfTransactions)\n{\n    Puts(\"OnVendingTransaction works!\");\n    return true;\n}\n","documentation":"Called when a player attempts to buy an item from a vending machine\nReturning true or false overrides default behavior"},{"category":"Vending","label":"OnNpcGiveSoldItem","insertText":"object OnNpcGiveSoldItem(NPCVendingMachine machine, Item soldItem, BasePlayer buyer)\n{\n    Puts(\"OnNpcGiveSoldItem works!\");\n    return null;\n}\n","documentation":"Called before a non-player controlled vending machine (at outpost etc.) gives the player the item they purchased.\nReturning a non-null value overrides default behaviour."},{"category":"Weapon","label":"CanCreateWorldProjectile","insertText":"object CanCreateWorldProjectile(HitInfo info, ItemDefinition itemDef)\n{\n    Puts(\"CanCreateWorldProjectile works!\");\n    return null;\n}\n","documentation":"Called when the item creates a projectile in the world\nReturning a non-null value overrides default behavior"},{"category":"Weapon","label":"OnProjectileRicochet","insertText":"object OnProjectileRicochet(BasePlayer player, PlayerProjectileRicochet ricochet)\n{\n    Puts(\"OnProjectileRicochet works!\");\n    return null;\n}\n","documentation":"Called when a player's weapon projectile ricochets\nReturning a non-null value overrides default behavior"},{"category":"Weapon","label":"OnExplosiveDud","insertText":"object OnExplosiveDud(DudTimedExplosive explosive)\n{\n    Puts(\"OnExplosiveDud works!\");\n    return null;\n}\n","documentation":"Called when explosive tries to become dud\nReturning a non-null value cancels default behavior"},{"category":"Weapon","label":"OnAmmoUnload","insertText":"object OnAmmoUnload(BaseProjectile projectile, Item item, BasePlayer player)\n{\n    Puts(\"OnAmmoUnload works!\");\n    return null;\n}\n","documentation":"Called when a player is trying to unload ammo\nReturning a non-null value cancels default behavior"},{"category":"Weapon","label":"OnExplosiveFuseSet","insertText":"object OnExplosiveFuseSet(TimedExplosive explosive, float fuseLength)\n{\n    Puts(\"OnExplosiveFuseSet works!\");\n    return null;\n}\n","documentation":"Called when a fuse of an explosive is set\nReturning a non-null value overwrites fuse length"},{"category":"Weapon","label":"CanExplosiveStick","insertText":"object CanExplosiveStick(TimedExplosive explosive, BaseEntity entity)\n{\n    Puts(\"CanExplosiveStick works!\");\n    return null;\n}\n","documentation":"Called when a Timed Explosive is attempting to stick to another entity\nReturning a non-null value overwrites the default behavior"},{"category":"Weapon","label":"OnWorldProjectileCreate","insertText":"object OnWorldProjectileCreate(HitInfo hitInfo, Item item)\n{\n    Puts(\"OnWorldProjectileCreate works!\");\n    return null;\n}\n","documentation":"Called when a projectile is created\nReturning a non-null value overrides default behavior"},{"category":"Weapon","label":"OnExplosiveDropped","insertText":"void OnExplosiveDropped(BasePlayer player, BaseEntity entity, ThrownWeapon item)\n{\n    Puts(\"OnExplosiveDropped works!\");\n}\n","documentation":"Called when the player drops an explosive item (C4, grenade, ...)\nNo return behavior"},{"category":"Weapon","label":"OnExplosiveThrown","insertText":"void OnExplosiveThrown(BasePlayer player, BaseEntity entity, ThrownWeapon item)\n{\n    Puts(\"OnExplosiveThrown works!\");\n}\n","documentation":"Called when the player throws an explosive item (C4, grenade, ...)\nNo return behavior"},{"category":"Weapon","label":"OnFlameThrowerBurn","insertText":"void OnFlameThrowerBurn(FlameThrower thrower, BaseEntity flame)\n{\n    Puts(\"OnFlameThrowerBurn works!\");\n}\n","documentation":"Called when the burn from a flame thrower spreads\nNo return behavior"},{"category":"Weapon","label":"OnMeleeThrown","insertText":"void OnMeleeThrown(BasePlayer player, Item item)\n{\n    Puts(\"OnMeleeThrown works!\");\n}\n","documentation":"Called when the player throws a melee item (axe, rock, ...)\nNo return behavior"},{"category":"Weapon","label":"OnMagazineReload","insertText":"object OnMagazineReload(BaseProjectile weapon, IAmmoContainer desiredAmount, BasePlayer player)\n{\n    Puts(\"OnMagazineReload works!\");\n    return null;\n}\n","documentation":"Called when the player reloads a magazine\nReturning a non-null value overrides default behavior"},{"category":"Weapon","label":"OnWeaponReload","insertText":"object OnWeaponReload(BaseProjectile weapon, BasePlayer player)\n{\n    Puts(\"OnWeaponReload works!\");\n    return null;\n}\n","documentation":"Called when the player reloads a weapon\nReturning a non-null value overrides default behavior"},{"category":"Weapon","label":"OnRocketLaunched","insertText":"void OnRocketLaunched(BasePlayer player, BaseEntity entity)\n{\n    Puts(\"OnRocketLaunched works!\");\n}\n","documentation":"Called when the player launches a rocket\nNo return behavior"},{"category":"Weapon","label":"OnAmmoSwitch","insertText":"object OnAmmoSwitch(BaseProjectile weapon, BasePlayer player)\n{\n    Puts(\"OnAmmoSwitch works!\");\n    return null;\n}\n","documentation":"Called when the player starts to switch the ammo in a weapon\nReturning a non-null value overrides default behavior"},{"category":"Weapon","label":"OnWeaponFired","insertText":"void OnWeaponFired(BaseProjectile projectile, BasePlayer player, ItemModProjectile mod, ProtoBuf.ProjectileShoot projectiles)\n{\n    Puts(\"OnWeaponFired works!\");\n}\n","documentation":"Called when the player fires a weapon\nNo return behavior"},{"category":"Vehicle","label":"CanUseHelicopter","insertText":"object CanUseHelicopter(BasePlayer player, CH47HelicopterAIController helicopter)\n{\n    Puts(\"CanUseHelicopter works!\");\n    return null;\n}\n","documentation":"Useful for denying to mount a CH47 helicopter\nReturning a non-null value cancels default behavior"},{"category":"Vehicle","label":"OnBoatPathGenerate","insertText":"List<Vector3> OnBoatPathGenerate()\n{\n    Puts(\"OnBoatPathGenerate works!\");\n    return null;\n}\n","documentation":"Called when generating ocean patrol path for CargoShip\nReturning a List<Vector3> overrides default behavior"},{"category":"Vehicle","label":"OnVehicleModuleMove","insertText":"object OnVehicleModuleMove(BaseVehicleModule module, BaseModularVehicle vehicle, BasePlayer player)\n{\n    Puts(\"OnVehicleModuleMove works!\");\n    return null;\n}\n","documentation":"Called when a player tries to move a vehicle module item that is currently on a vehicle\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"OnEngineStart","insertText":"object OnEngineStart(BaseVehicle vehicle, BasePlayer driver)\n{\n    Puts(\"OnEngineStart works!\");\n    return null;\n}\n","documentation":"Called when a player tries to start a vehicle engine\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"OnEngineStarted","insertText":"void OnEngineStarted(BaseVehicle vehicle, BasePlayer driver)\n{\n    Puts(\"OnEngineStarted works!\");\n}\n","documentation":"Called right after a vehicle engine has started\nNo return behavior"},{"category":"Vehicle","label":"OnEngineStopped","insertText":"void OnEngineStopped(BaseVehicle vehicle)\n{\n    Puts(\"OnEngineStopped works!\");\n}\n","documentation":"Called right after a vehicle engine has stopped\nNo return behavior"},{"category":"Vehicle","label":"OnEngineStop","insertText":"object OnEngineStop(BaseVehicle vehicle)\n{\n    Puts(\"OnEngineStop works!\");\n    return null;\n}\n","documentation":"Called when a vehicle engine is about to stop\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"OnEngineStatsRefresh","insertText":"object OnEngineStatsRefresh(VehicleModuleEngine engineModule, EngineStorage engineStorage)\n{\n    Puts(\"OnEngineStatsRefresh works!\");\n    return null;\n}\n","documentation":"Called right before the stats of a modular car engine are refreshed\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"OnEngineStatsRefreshed","insertText":"void OnEngineStatsRefreshed(VehicleModuleEngine engineModule, EngineStorage engineStorage)\n{\n    Puts(\"OnEngineStatsRefreshed works!\");\n}\n","documentation":"Called right after the stats of a modular car engine are refreshed\nNo return behavior"},{"category":"Vehicle","label":"OnVehicleModuleSelect","insertText":"object OnVehicleModuleSelect(Item moduleItem, ModularCarGarage carLift, BasePlayer player)\n{\n    Puts(\"OnVehicleModuleSelect works!\");\n    return null;\n}\n","documentation":"Called right after a player has selected a vehicle module item in a car inventory, but before they are shown the corresponding storage container\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"OnVehicleModuleSelected","insertText":"void OnVehicleModuleSelected(Item moduleItem, ModularCarGarage carLift, BasePlayer player)\n{\n    Puts(\"OnVehicleModuleSelected works!\");\n}\n","documentation":"Called right after a player has selected a vehicle module item in a car's inventory, and after they have been shown the corresponding storage container if applicable\nNo return behavior"},{"category":"Vehicle","label":"OnVehicleModuleDeselected","insertText":"void OnVehicleModuleDeselected(ModularCarGarage carLift, BasePlayer player)\n{\n    Puts(\"OnVehicleModuleDeselected works!\");\n}\n","documentation":"Called right after a player deselects a vehicle module item in a car's inventory\nNo return behavior"},{"category":"Vehicle","label":"OnHotAirBalloonToggle","insertText":"object OnHotAirBalloonToggle(HotAirBalloon balloon, BasePlayer player)\n{\n    Puts(\"OnHotAirBalloonToggle works!\");\n    return null;\n}\n","documentation":"Called when a player tries to toggle a hot air balloon on or off\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"OnHotAirBalloonToggled","insertText":"void OnHotAirBalloonToggled(HotAirBalloon balloon, BasePlayer player)\n{\n    Puts(\"OnHotAirBalloonToggled works!\");\n}\n","documentation":"Called right after a player has toggled a hot air balloon on or off\nNo return behavior"},{"category":"Vehicle","label":"OnVehicleModulesAssign","insertText":"object OnVehicleModulesAssign(ModularCar car, ItemModVehicleModule[] modulePreset)\n{\n    Puts(\"OnVehicleModulesAssign works!\");\n    return null;\n}\n","documentation":"Called right after a modular car has spawned, but before module items are added to its inventory from a preset\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"OnVehicleModulesAssigned","insertText":"void OnVehicleModulesAssigned(ModularCar car, ItemModVehicleModule[] modulePreset)\n{\n    Puts(\"OnVehicleModulesAssigned works!\");\n}\n","documentation":"Called right after a car has spawned and its module inventory has been filled with module items from a preset\nNo return behavior"},{"category":"Vehicle","label":"OnVehiclePush","insertText":"object OnVehiclePush(BaseVehicle vehicle, BasePlayer player)\n{\n    Puts(\"OnVehiclePush works!\");\n    return null;\n}\n","documentation":"Called when a player tries to push a vehicle\nReturning a non-null value overrides default behavior"},{"category":"Vehicle","label":"CanCheckFuel","insertText":"object CanCheckFuel(EntityFuelSystem fuelSystem, StorageContainer fuelContainer, BasePlayer player)\n{\n    Puts(\"CanCheckFuel works!\");\n    return null;\n}\n","documentation":"Called when a player tries to loot a vehicle's fuel container\nReturning true or false overrides default behavior"},{"category":"Vehicle","label":"CanUseFuel","insertText":"object CanUseFuel(EntityFuelSystem fuelSystem, StorageContainer fuelContainer, float currentSeconds, float fuelPerSecond)\n{\n    Puts(\"CanUseFuel works!\");\n    return null;\n}\n","documentation":"Called before a vehicle fuel system consumes fuel\nReturning true or false overrides default behavior"},{"category":"Vehicle","label":"OnFuelCheck","insertText":"object OnFuelCheck(EntityFuelSystem fuelSystem)\n{\n    Puts(\"OnFuelCheck works!\");\n    return null;\n}\n","documentation":"Called when determining whether a vehicle has sufficient fuel\nReturning true or false overrides default behavior"},{"category":"Vehicle","label":"OnFuelAmountCheck","insertText":"object OnFuelAmountCheck(EntityFuelSystem fuelSystem, Item fuelItem)\n{\n    Puts(\"OnFuelAmountCheck works!\");\n    return null;\n}\n","documentation":"Called when the amount of fuel in a vehicle is being determined\nReturning a numeric value (int) overrides the default value"},{"category":"Vehicle","label":"OnFuelItemCheck","insertText":"object OnFuelItemCheck(EntityFuelSystem fuelSystem, StorageContainer fuelContainer)\n{\n    Puts(\"OnFuelItemCheck works!\");\n    return null;\n}\n","documentation":"Called when determining which item should be used to fuel a vehicle\nReturning an Item overrides default behavior"},{"category":"Team","label":"OnTeamCreate","insertText":"object OnTeamCreate(BasePlayer player)\n{\n    Puts(\"OnTeamCreate works!\");\n    return null;\n}\n","documentation":"Useful for canceling team creation\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamInvite","insertText":"object OnTeamInvite(BasePlayer inviter, BasePlayer target)\n{\n    Puts($\"{inviter.displayName} invited {target.displayName} to his team\");\n    return null;\n}\n","documentation":"Useful for canceling an invitation\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamRejectInvite","insertText":"object OnTeamRejectInvite(BasePlayer rejector, RelationshipManager.PlayerTeam team)\n{\n    Puts(\"OnTeamRejectInvite works!\");\n    return null;\n}\n","documentation":"Useful for canceling the invitation rejection\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamPromote","insertText":"object OnTeamPromote(RelationshipManager.PlayerTeam team, BasePlayer newLeader)\n{\n    Puts(\"OnTeamPromote works!\");\n    return null;\n}\n","documentation":"Useful for canceling player's promotion in the team\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamLeave","insertText":"object OnTeamLeave(RelationshipManager.PlayerTeam team, BasePlayer player)\n{\n    Puts(\"OnTeamLeave works!\");\n    return null;\n}\n","documentation":"Useful for canceling the leave from the team\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamKick","insertText":"object OnTeamKick(RelationshipManager.PlayerTeam team, BasePlayer player, ulong target)\n{\n    Puts(\"OnTeamKick works!\");\n    return null;\n}\n","documentation":"Useful for canceling kick of the player from the team\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamAcceptInvite","insertText":"object OnTeamAcceptInvite(RelationshipManager.PlayerTeam team, BasePlayer player)\n{\n    Puts(\"OnTeamAcceptInvite works!\");\n    return null;\n}\n","documentation":"Useful for canceling team invitation acceptation\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamDisband","insertText":"object OnTeamDisband(RelationshipManager.PlayerTeam team)\n{\n    Puts(\"OnTeamDisband works!\");\n    return null;\n}\n","documentation":"Useful for canceling team disbandment\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamDisbanded","insertText":"void OnTeamDisbanded(RelationshipManager.PlayerTeam team)\n{\n    Puts(\"OnTeamDisbanded works!\");\n}\n","documentation":"Called when the team was disbanded\nNo return behavior"},{"category":"Team","label":"OnTeamUpdate","insertText":"object OnTeamUpdate(ulong currentTeam, ulong newTeam, BasePlayer player)\n{\n    Puts(\"OnTeamUpdate works!\");\n    return null;\n}\n","documentation":"Called when player's team is updated\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamUpdated","insertText":"object OnTeamUpdated(ulong currentTeam, PlayerTeam playerTeam, BasePlayer player)\n{\n    Puts(\"OnTeamUpdate works!\");\n    return null;\n}\n","documentation":"Called before sending team info to player\nReturning a non-null value cancels default behavior"},{"category":"Team","label":"OnTeamCreated","insertText":"void OnTeamCreated(BasePlayer player, RelationshipManager.PlayerTeam team)\n{\n    Puts(\"OnTeamCreated works!\");\n}\n","documentation":"Called after a team was created\nNo return behavior"},{"category":"World","label":"OnWorldPrefabSpawned","insertText":"void OnWorldPrefabSpawned(GameObject gameObject, string category)\n{\n    Puts(\"OnWorldPrefabSpawned works!\");\n}\n","documentation":"Called when a world prefab was spawned\nNo return behavior"},{"category":"Fishing","label":"OnFishCaught","insertText":"void OnFishCaught(ItemDefinition definition, BaseFishingRod rod, BasePlayer player)\n{\n    Puts($\"A fish ({definition.shortname}) has just been caught by {player.displayName}!\");\n}\n","documentation":"Called after a fish is caught\nNo return behavior"},{"category":"Fishing","label":"CanCatchFish","insertText":"bool? CanCatchFish(BasePlayer player, BaseFishingRod rod, Item item)\n{\n    Puts(\"can we catch em fishes?\");\n    return null;\n}\n","documentation":"Called before a fish is caught\nReturning true or false overrides default behavior"},{"category":"Fishing","label":"OnFishCatch","insertText":"Item OnFishCatch(Item item, BaseFishingRod rod, BasePlayer player)\n{\n    Puts($\"{player.displayName} has just caught {item.amount} x {item.info.shortname}!\");\n    return null;\n}\n","documentation":"Called after a fish is caught, before the item is given\nReturning a non-null value overrides default behavior"},{"category":"Fishing","label":"OnFishingStopped","insertText":"void OnFishingStopped(BaseFishingRod rod, BaseFishingRod.FailReason reason)\n{\n    Puts(\"OnFishingStopped works!\");\n}\n","documentation":"Called just after the fishing minigame has been stopped.\nNo return behaviour"},{"category":"Electronic","label":"OnExcavatorSuppliesRequest","insertText":"object OnExcavatorSuppliesRequest(ExcavatorSignalComputer computer, BasePlayer player)\n{\n    Puts(\"OnExcavatorSuppliesRequest works!\");\n    return null;\n}\n","documentation":"Called just after the excavator supply computer is triggered, before the plane is spawned.\nReturning non-null overrides default behaviour."},{"category":"Electronic","label":"OnExcavatorSuppliesRequested","insertText":"void OnExcavatorSuppliesRequested(ExcavatorSignalComputer computer, BasePlayer player, BaseEntity cargoPlane)\n{\n    Puts(\"OnExcavatorSuppliesRequested works!\");\n}\n","documentation":"Called after the excavator signal computer was triggered, just after the supply plane is spawned."},{"category":"Clan","label":"OnClanLogoChanged","insertText":"void OnClanLogoChanged(LocalClan clan, byte[] logo, ulong steamId)\n{\n    Puts(\"OnClanLogoChanged works!\");\n}\n","documentation":"Called after a player changes a clan logo\nNo return behavior"},{"category":"Clan","label":"OnClanColorChanged","insertText":"void OnClanColorChanged(LocalClan clan, Color32 color, ulong steamId)\n{\n    Puts(\"OnClanColorChanged works!\");\n}\n","documentation":"Called after a player changes a clan color\nNo return behavior"},{"category":"Clan","label":"OnClanMemberKicked","insertText":"void OnClanMemberKicked(LocalClan clan, ulong steamId, ulong bySteamId)\n{\n    Puts(\"OnClanMemberKicked works!\");\n}\n","documentation":"Called after a player has kicked another player from a clan\nNo return behavior"},{"category":"Clan","label":"OnClanMemberLeft","insertText":"void OnClanMemberLeft(LocalClan clan, ulong steamId)\n{\n    Puts(\"OnClanMemberLeft works!\");\n}\n","documentation":"Called after a player has voluntarily left a clan\nNo return behavior"},{"category":"Clan","label":"OnClanMemberAdded","insertText":"void OnClanMemberAdded(long clanId, ulong steamId)\n{\n    Puts(\"OnClanMemberAdded works!\");\n}\n","documentation":"Called after a player has accepted a clan invite\nNo return behavior"},{"category":"Clan","label":"OnClanCreated","insertText":"void OnClanCreated(LocalClan clan, ulong steamId)\n{\n    Puts(\"OnClanCreated works!\");\n}\n","documentation":"Called after a player has created a clan\nNo return behavior"},{"category":"Clan","label":"OnClanDisbanded","insertText":"void OnClanDisbanded(LocalClan clan, ulong steamId)\n{\n    Puts(\"OnClanDisbanded works!\");\n}\n","documentation":"Called after a player disbands a clan\nNo return behavior"},{"category":"Sign","label":"OnSignLocked","insertText":"void OnSignLocked(Signage sign, BasePlayer player)\n{\n    Puts(\"OnSignLocked works!\");\n}\n","documentation":"Called after the player has locked a sign or photo frame\nNo return behavior"},{"category":"Sign","label":"OnSignUpdated","insertText":"void OnSignUpdated(Signage sign, BasePlayer player, int textureIndex)\n{\n    Puts(\"OnSignUpdated works!\");\n}\n","documentation":"Called after the player has changed the text on a sign or updated a photo frame\nNo return behavior"},{"category":"Sign","label":"OnSpinWheel","insertText":"void OnSpinWheel(BasePlayer player, SpinnerWheel wheel)\n{\n    Puts(\"OnSpinWheel works!\");\n}\n","documentation":"Called when the player spins a spinner wheel\nNo return behavior"},{"category":"TechTree","label":"CanUnlockTechTreeNode","insertText":"object CanUnlockTechTreeNode(BasePlayer player, TechTreeData.NodeInstance node, TechTreeData techTree)\n{\n    Puts(\"CanUnlockTechTreeNode works!\");\n    return null;\n}\n","documentation":"Called when a player is attempting to unlock a blueprint in a tech tree\nReturning true or false overrides default behavior\nUseful for bypassing unlock requirements or disallowing particular blueprints from being unlocked"},{"category":"TechTree","label":"CanUnlockTechTreeNodePath","insertText":"object CanUnlockTechTreeNodePath(BasePlayer player, TechTreeData.NodeInstance node, TechTreeData techTree)\n{\n    Puts(\"CanUnlockTechTreeNodePath works!\");\n    return null;\n}\n","documentation":"Called when a player is attempting to unlock a blueprint in a tech tree, after the CanUnlockTechTreeNode hook, when determining whether they have the prerequisite blueprints unlocked\nReturning true or false overrides default behavior\nUseful for customizing prerequisites without conflicting with the CanPlayerUnlock hook"},{"category":"TechTree","label":"OnTechTreeNodeUnlock","insertText":"object OnTechTreeNodeUnlock(Workbench workbench, TechTreeData.NodeInstance node, BasePlayer player)\n{\n    Puts(\"OnTechTreeNodeUnlock works!\");\n    return null;\n}\n","documentation":"Called when a player is attempting to unlock a blueprint in a tech tree, after the CanUnlockTechTreeNode and CanUnlockTechTreeNodePath hooks, before the player is charged scrap\nReturning a non-null value overrides default behavior\nUseful for replacing the default behavior to charge the player a different currency, or to unlock multiple blueprints at once (such as those leading up to the one selected)"},{"category":"TechTree","label":"OnTechTreeNodeUnlocked","insertText":"void OnTechTreeNodeUnlocked(Workbench workbench, TechTreeData.NodeInstance node, BasePlayer player)\n{\n    Puts(\"OnTechTreeNodeUnlocked works!\");\n}\n","documentation":"Called after a player has unlocked a blueprint in a tech tree\nNo return behavior\nUseful for automatically unlocking blueprints for team members"},{"category":"Phone","label":"OnPhoneDial","insertText":"object OnPhoneDial(PhoneController callerPhone, PhoneController receiverPhone, BasePlayer player)\n{\n    Puts(\"OnPhoneDial works!\");\n    return null;\n}\n","documentation":"Called when a player places a phone call\nReturning a non-null value overrides default behavior"},{"category":"Phone","label":"CanReceiveCall","insertText":"object CanReceiveCall(PhoneController receiverPhone)\n{\n    Puts(\"CanReceiveCall works!\");\n    return null;\n}\n","documentation":"Called when a player tries to place a phone call\nReturning true or false overrides default behavior"},{"category":"Phone","label":"OnPhoneAnswer","insertText":"object OnPhoneAnswer(PhoneController receiverPhone, PhoneController callerPhone)\n{\n    Puts(\"OnPhoneAnswer works!\");\n    return null;\n}\n","documentation":"Called when a player tries to answer a phone call\nReturning a non-null value overrides default behavior"},{"category":"Phone","label":"OnPhoneAnswered","insertText":"void OnPhoneAnswered(PhoneController receiverPhone, PhoneController callerPhone)\n{\n    Puts(\"OnPhoneAnswered works!\");\n}\n","documentation":"Called right after a player has answered a phone call\nNo return behavior"},{"category":"Phone","label":"OnPhoneCallStart","insertText":"object OnPhoneCallStart(PhoneController phone, PhoneController otherPhone, BasePlayer player)\n{\n    Puts(\"OnPhoneCallStart works!\");\n    return null;\n}\n","documentation":"Called after a phone has been answered, right before voice communication is established\nReturning a non-null value overrides default behavior"},{"category":"Phone","label":"OnPhoneCallStarted","insertText":"void OnPhoneCallStarted(PhoneController phone, PhoneController otherPhone, BasePlayer player)\n{\n    Puts(\"OnPhoneCallStarted works!\");\n}\n","documentation":"Called right after a phone call has been answered and voice communication has been established"},{"category":"Phone","label":"OnPhoneDialFail","insertText":"object OnPhoneDialFail(PhoneController phone, Telephone.DialFailReason reason, BasePlayer player)\n{\n    Puts(\"OnPhoneDialFail works!\");\n    return null;\n}\n","documentation":"Called when a phone call is about to end or fail to start\nReturning a non-null value overrides default behavior"},{"category":"Phone","label":"OnPhoneDialFailed","insertText":"void OnPhoneDialFailed(PhoneController phone, Telephone.DialFailReason reason, BasePlayer player)\n{\n    Puts(\"OnPhoneDialFailed works!\");\n}\n","documentation":"Called after a phone call has ended or failed to start\nNo return behavior"},{"category":"Phone","label":"OnPhoneDialTimeout","insertText":"object OnPhoneDialTimeout(PhoneController callerPhone, PhoneController receiverPhone, BasePlayer player)\n{\n    Puts(\"OnPhoneDialTimeout works!\");\n    return null;\n}\n","documentation":"Called when a phone is about to automatically hang up because the receiver phone wasn't answered in time\nReturning a non-null value overrides default behavior"},{"category":"Phone","label":"OnPhoneDialTimedOut","insertText":"void OnPhoneDialTimedOut(PhoneController callerPhone, PhoneController receiverPhone, BasePlayer player)\n{\n    Puts(\"OnPhoneDialTimedOut works!\");\n}\n","documentation":"Called right after a phone was automatically hung up because the receiver phone wasn't answered in time\nNo return behavior"},{"category":"Phone","label":"OnPhoneNameUpdate","insertText":"object OnPhoneNameUpdate(PhoneController phoneController, string name, BasePlayer player)\n{\n    Puts(\"OnPhoneNameUpdate works!\");\n    return null;\n}\n","documentation":"Called when a player tries to update a phone name\nReturning a non-null value overrides default behavior"},{"category":"Phone","label":"OnPhoneNameUpdated","insertText":"void OnPhoneNameUpdated(PhoneController phoneController, string name, BasePlayer player)\n{\n    Puts(\"OnPhoneNameUpdated works!\");\n}\n","documentation":"Called after a player has updated a phone name\nNo return behavior"},{"category":"Plugin","label":"Loaded","insertText":"void Loaded()\n{\n    Puts(\"Loaded works!\");\n}\n","documentation":"Called when a plugin has finished loading\nOther plugins may or may not be present, dependant on load order\nNo return behavior"},{"category":"Plugin","label":"Unload","insertText":"void Unload()\n{\n    Puts(\"Save data, nullify static variables, etc.\");\n}\n","documentation":"Called when a plugin is being unloaded\nNo return behavior"},{"category":"Plugin","label":"LoadDefaultConfig","insertText":"protected override void LoadDefaultConfig()\n{\n    Puts(\"Default configuration created\");\n}\n","documentation":"Called when the config for a plugin should be initialized\nOnly called if the config file does not already exist\nNo return behavior"},{"category":"Plugin","label":"LoadDefaultMessages","insertText":"protected override void LoadDefaultMessages()\n{\n    lang.RegisterMessages(new Dictionary<string, string>\n    {\n        [\"Example\"] = \"This is an example message!\",\n        [\"AnotherExample\"] = \"Here is another example\"\n    }, this);\n}\n","documentation":"Called when the localization for a plugin should be registered\nNo return behavior"},{"category":"Permission","label":"OnPermissionRegistered","insertText":"void OnPermissionRegistered(string name, Plugin owner)\n{\n    Puts($\"Permission '{name}' has been registered {(owner != null ? $\"for {owner.Title}\" : \"\")}\");\n}\n","documentation":"Called when a permission has been registered\nNo return behavior"},{"category":"Permission","label":"OnGroupPermissionGranted","insertText":"void OnGroupPermissionGranted(string name, string perm)\n{\n    Puts($\"Group '{name}' granted permission: {perm}\");\n}\n","documentation":"Called when a permission has been granted to a group\nNo return behavior"},{"category":"Permission","label":"OnGroupPermissionRevoked","insertText":"void OnGroupPermissionRevoked(string name, string perm)\n{\n    Puts($\"Group '{name}' revoked permission: {perm}\");\n}\n","documentation":"Called when a permission has been revoked from a group\nNo return behavior"},{"category":"Permission","label":"OnGroupCreated","insertText":"void OnGroupCreated(string name)\n{\n    Puts($\"Group '{name}' has been created!\");\n}\n","documentation":"Called when a group has been created successfully\nNo return behavior"},{"category":"Permission","label":"OnGroupDeleted","insertText":"void OnGroupDeleted(string name)\n{\n    Puts($\"Group '{name}' has been deleted!\");\n}\n","documentation":"Called when a group has been deleted successfully\nNo return behavior"},{"category":"Permission","label":"OnGroupTitleSet","insertText":"void OnGroupTitleSet(string name, string title)\n{\n    Puts($\"Title '{title}' set on group '{name}'\");\n}\n","documentation":"Called when a group title has been updated\nNo return behavior"},{"category":"Permission","label":"OnGroupRankSet","insertText":"void OnGroupRankSet(string name, int rank)\n{\n    Puts($\"Rank '{rank}' set on group '{name}'\");\n}\n","documentation":"Called when a group rank has been updated\nNo return behavior"},{"category":"Permission","label":"OnGroupParentSet","insertText":"void OnGroupParentSet(string name, string parent)\n{\n    Puts($\"Parent '{parent}' set on group '{name}'\");\n}\n","documentation":"Called when a group parent has been updated\nNo return behavior"}]
